using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Ookii.Jumbo.IO;

namespace Ookii.Jumbo.Jet.Tasks
{
    /// <summary>
    /// Base class for tasks generated by the <see cref="Ookii.Jumbo.Jet.Jobs.Builder.JobBuilder.Generate{T}(int, Action{Ookii.Jumbo.IO.RecordWriter{T},ProgressContext})"/> method.
    /// </summary>
    /// <typeparam name="T">The record type</typeparam>
    [AdditionalProgressCounter("Generate")]
    public abstract class GeneratorTask<T> : Configurable, ITask<int, T>, IHasAdditionalProgress
    {
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(typeof(GeneratorTask<>));

        private readonly ProgressContext _progressContext;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneratorTask&lt;T&gt;"/> class.
        /// </summary>
        protected GeneratorTask()
        {
            _progressContext = new ProgressContext(this);
        }

        /// <summary>
        /// Runs the task.
        /// </summary>
        /// <param name="input">A <see cref="RecordReader{T}"/> from which the task's input can be read.</param>
        /// <param name="output">A <see cref="RecordWriter{T}"/> to which the task's output should be written.</param>
        public void Run(RecordReader<int> input, RecordWriter<T> output)
        {
            if( input != null )
                _log.Warn("Input was provided but will be ignored by this task.");
            Generate(output, _progressContext);
        }

        /// <summary>
        /// Generates data.
        /// </summary>
        /// <param name="output">A <see cref="RecordWriter{T}"/> to which the task's output should be written.</param>
        /// <param name="context">The <see cref="ProgressContext"/> that can be used to report progress.</param>
        protected abstract void Generate(RecordWriter<T> output, ProgressContext context);

        /// <summary>
        /// Gets the additional progress value.
        /// </summary>
        /// <value>
        /// The additional progress value.
        /// </value>
        public float AdditionalProgress
        {
            get { return _progressContext.Progress; }
        }
    }
}
