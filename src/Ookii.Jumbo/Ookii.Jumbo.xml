<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ookii.Jumbo</name>
    </assembly>
    <members>
        <member name="T:Ookii.Jumbo.CollectionExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.CollectionExtensions.AddRange``1(System.Collections.ObjectModel.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of elements to the collection.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="target">The collection to add the elements to.</param>
            <param name="collection">The collection containing the elements to add.</param>
        </member>
        <member name="T:Ookii.Jumbo.CompressionType">
            <summary>
            Provides the types of compression supported by Jumbo.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.CompressionType.None">
            <summary>
            Don't use compression.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.CompressionType.GZip">
            <summary>
            Use the <see cref="T:System.IO.Compression.GZipStream"/> class for compression.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.CompressionUtility">
            <summary>
            Provides compression functionality for streams.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.CompressionUtility.GZipCompressionStream">
            <summary>
            Adds support for getting compressed and uncompressed size to <see cref="T:System.IO.Compression.GZipStream"/>, needed because
            the file channel uses that to compute metrics and progress.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.CompressionUtility.CreateCompressor(System.IO.Stream,Ookii.Jumbo.CompressionType)">
            <summary>
            Creates a compressor for the specified stream.
            </summary>
            <param name="target">The stream to write the compressed data to.</param>
            <param name="type">The type of compression to use.</param>
            <returns>A stream that compresses the data according to the specified compression type, or <paramref name="target"/> itself
            if <see cref="F:Ookii.Jumbo.CompressionType.None"/> was specified.</returns>
        </member>
        <member name="M:Ookii.Jumbo.CompressionUtility.CreateDecompressor(System.IO.Stream,Ookii.Jumbo.CompressionType,System.Int64)">
            <summary>
            Creates a decompressor for the specified stream.
            </summary>
            <param name="source">The stream to read the compressed data from.</param>
            <param name="type">The type of compression to use.</param>
            <param name="uncompressedSize">The size of the stream's data after compression, or -1 if unknown.</param>
            <returns>A stream that decompresses the data according to the specified compression type, or <paramref name="source"/> itself
            if <see cref="F:Ookii.Jumbo.CompressionType.None"/> was specified.</returns>
        </member>
        <member name="T:Ookii.Jumbo.Crc32Checksum">
            <summary>
            Computes the CRC32 checksum for the input data.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Crc32Checksum.Value">
            <summary>
            Gets or sets the the current CRC32 checksum computed so far.
            </summary>
            <value>
            The CRC32 checksum computed so far.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.Crc32Checksum.ValueUInt32">
            <summary>
            Gets or sets the the current CRC32 checksum computed so far.
            </summary>
            <value>
            The CRC32 checksum computed so far.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.Crc32Checksum.Reset">
            <summary>
            Resets the checksum value.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Crc32Checksum.Update(System.Byte[])">
            <summary>
            Updates the checksum using the data in the specified array.
            </summary>
            <param name="buffer">An array of bytes.</param>
        </member>
        <member name="M:Ookii.Jumbo.Crc32Checksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum using the data in the specified array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin calculating the checksum.</param>
            <param name="count">The number of bytes from <paramref name="buffer"/> to be used in the checksum calculation.</param>
        </member>
        <member name="T:Ookii.Jumbo.ExtendedCollection`1">
            <summary>
            Provides additional functionality for <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.ExtendedCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.ExtendedCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.ExtendedCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of elements to the collection.
            </summary>
            <param name="collection">The collection containing the elements to add.</param>
        </member>
        <member name="T:Ookii.Jumbo.ICompressor">
            <summary>
            Interface for streams that compress data.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.ICompressor.CompressedBytesWritten">
            <summary>
            When compressing, gets the number of compressed bytes written.
            </summary>
            <value>
            The number of compressed bytes written, or 0 if this stream only supports decompression.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.ICompressor.UncompressedBytesWritten">
            <summary>
            When compressing, gets the number of uncompressed bytes written.
            </summary>
            <value>
            The number of uncompressed bytes written, or 0 if this stream only supports decompression.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.ICompressor.CompressedBytesRead">
            <summary>
            When decompressing, gets the number of compressed bytes read.
            </summary>
            <value>
            The number of compressed bytes read, or 0 if this stream only supports compression.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.ICompressor.UncompressedBytesRead">
            <summary>
            When decompressing, gets the number of uncompressed bytes read.
            </summary>
            <value>
            The number of uncompressed bytes read, or 0 if this stream only supports compression.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.ICompressor.CompressedSize">
            <summary>
            Gets the length of the underlying compressed stream.
            </summary>
            <value>
            The length of the underlying stream.
            </value>
        </member>
        <member name="T:Ookii.Jumbo.IndividualProcessorStatus">
            <summary>
            Provides usage information for a single processor or core in the system.
            </summary>
            <remarks>
            <para>
              The percentages are calculated between two calls of the <see cref="M:Ookii.Jumbo.ProcessorStatus.Refresh"/> method, so vary the frequency of the calls to vary the time slice covered by the percentages.
            </para>
            <para>
              This class is also used to provide combined statistics for all processors via the <see cref="T:Ookii.Jumbo.ProcessorStatus"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IndividualProcessorStatus.CpuId">
            <summary>
            Gets the identifier for this processor.
            </summary>
            <value>
            The CPU identifier, or -1 if this instance represents the combined statistics for all processors.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IndividualProcessorStatus.PercentIdleTime">
            <summary>
            Gets the percentage of time the processor was idle.
            </summary>
            <value>
            A value between 0 and 100 indicating the percentage of time the processor was idle.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IndividualProcessorStatus.PercentUserTime">
            <summary>
            Gets the percentage of time spent executing user code.
            </summary>
            <value>
            A value between 0 and 100 indicating the percentage of time the processor spent executing user code.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IndividualProcessorStatus.PercentSystemTime">
            <summary>
            Gets the percentage of time spent executing system (kernel) code.
            </summary>
            <value>
            A value between 0 and 100 indicating the percentage of time the processor spent executing system (kernel) code.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IndividualProcessorStatus.PercentInterruptTime">
            <summary>
            Gets the percentage of time spent processing hardware and software interrupts.
            </summary>
            <value>
            A value between 0 and 100 indicating the percentage of time the processor spent processing hardware and software interrupts.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IndividualProcessorStatus.PercentIOWaitTime">
            <summary>
            Gets the percentage of time spent waiting for I/O.
            </summary>
            <value>
            A value between 0 and 100 indicating the percentage of time the processor spent waiting for I/O.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IndividualProcessorStatus.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:Ookii.Jumbo.IndividualProcessorStatus"/>.
            </summary>
            <returns>A string representation of the current <see cref="T:Ookii.Jumbo.IndividualProcessorStatus"/>.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.BinaryRecordReader`1">
            <summary>
            A record reader that reads from a stream created with a <see cref="T:Ookii.Jumbo.IO.BinaryRecordWriter`1"/>.
            </summary>
            <typeparam name="T">The type of the record. Must implement <see cref="T:Ookii.Jumbo.IO.IWritable"/> or have an associated <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> implementation.</typeparam>
            <remarks>
            <para>
              No attempt is made to verify that the stream contains the correct type of record. The stream
              must contain records of type <typeparamref name="T"/>. They may not be of a type derived
              from <typeparamref name="T"/>.
            </para>
            <para>
              This class cannot be used to read starting from any offset other than zero or a structural
              boundary in a record aware stream with the <see cref="F:Ookii.Jumbo.IO.RecordStreamOptions.DoNotCrossBoundary"/> option set, because a file created
              with <see cref="T:Ookii.Jumbo.IO.BinaryRecordWriter`1"/> does not contain any record boundaries that can be used
              to sync the file when starting at a random offset.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordReader`1.#ctor(System.String,System.Boolean,System.Boolean,System.Int32,Ookii.Jumbo.CompressionType,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> class that reads from the specified file.
            </summary>
            <param name="fileName">The path to the file to read from.</param>
            <param name="allowRecordReuse"><see langword="true"/> if the reader can reuse the same instance of <typeparamref name="T"/> every time; <see langword="false"/>
            if a new instance must be created for every record.</param>
            <param name="deleteFile"><see langword="true"/> if the file should be deleted after reading is finished; otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The size of the buffer to use when reading the file.</param>
            <param name="compressionType">The type of compression to use to decompress the file.</param>
            <param name="uncompressedSize">The uncompressed size of the stream.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordReader`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> class that doesn't reuse records.
            </summary>
            <param name="stream">The stream to read the records from.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordReader`1.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> class.
            </summary>
            <param name="stream">The stream to read the records from.</param>
            <param name="allowRecordReuse"><see langword="true"/> if the reader can reuse the same instance of <typeparamref name="T"/> every time; <see langword="false"/>
            if a new instance must be created for every record.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordReader`1.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
            <param name="size">The size.</param>
            <param name="allowRecordReuse"><see langword="true"/> to [allow record reuse]; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordReader`1.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
            <param name="size">The size.</param>
            <param name="allowRecordReuse"><see langword="true"/> to [allow record reuse]; otherwise, <see langword="false"/>.</param>
            <param name="inputContainsRecordSizes">If set to <see langword="true"/> the input data contains the sizes of the records in between the record data.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordReader`1.ReadRecordInternal">
            <summary>
            Reads a record.
            </summary>
            <returns>The record, or the default value of <typeparamref name="T"/> if it is beyond the end of the stream.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordReader`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.StreamRecordReader`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.BinaryRecordWriter`1">
            <summary>
            A record writer that writes to a file using a binary format based on <see cref="T:Ookii.Jumbo.IO.IWritable"/> serialization.
            </summary>
            <typeparam name="T">The type of the record to write. Must implement <see cref="T:Ookii.Jumbo.IO.IWritable"/> or have an associated <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> implementation.</typeparam>
            <remarks>
            <para>
              The data written by this class can be read back by a <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> class with the same value for <typeparamref name="T"/>.
              All records passed to <see cref="M:Ookii.Jumbo.IO.RecordWriter`1.WriteRecord(`0)"/> must be <typeparamref name="T"/>; they may not be a type derived
              from <typeparamref name="T"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordWriter`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.BinaryRecordWriter`1"/> class.
            </summary>
            <param name="stream">The stream to write the records to.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordWriter`1.WriteRecordInternal(`0)">
            <summary>
            Writes the specified record to the stream.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.BinaryRecordWriter`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.BinaryRecordWriter`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.ChildReaderException">
            <summary>
            Exception thrown if a error occurs reading from a child reader in a <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/>.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.ChildReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.ChildReaderException"/> class. 
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.ChildReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.ChildReaderException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.ChildReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.ChildReaderException"/> class with a specified error message and a reference to the inner <see cref="T:Ookii.Jumbo.IO.ChildReaderException"/> that is the cause of this <see cref="T:Ookii.Jumbo.IO.ChildReaderException"/>. 
            </summary>
            <param name="message">The error message that explains the reason for the <see cref="T:Ookii.Jumbo.IO.ChildReaderException"/>.</param>
            <param name="inner">The <see cref="T:System.Exception"/> that is the cause of the current <see cref="T:System.Exception"/>, or a null reference (Nothing in Visual Basic) if no inner <see cref="T:System.Exception"/> is specified.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.ChildReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.ChildReaderException"/> class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the <see cref="T:Ookii.Jumbo.IO.ChildReaderException"/> being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.CurrentPartitionChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartitionChanging"/> event.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.CurrentPartitionChangingEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.CurrentPartitionChangingEventArgs"/> class.
            </summary>
            <param name="newPartitionNumber">The new partition number.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.CurrentPartitionChangingEventArgs.NewPartitionNumber">
            <summary>
            Gets the value that <see cref="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartition"/> will be changed to.
            </summary>
            <value>The new value of <see cref="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartition"/>.</value>
        </member>
        <member name="T:Ookii.Jumbo.IO.DefaultRawComparer">
            <summary>
            Provides raw comparers for built-in framework types.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.IO.EnumerableRecordReader`1">
            <summary>
            A record reader that reads from a list. Mainly for test purposes.
            </summary>
            <typeparam name="T">The type of record.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.EnumerableRecordReader`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.EnumerableRecordReader`1"/> class.
            </summary>
            <param name="source">The list to read from.</param>
            <param name="count">The number of items in the list, or zero if this is unknown.</param>
            <remarks>
            <para>
              If <paramref name="count"/> is zero, <see cref="P:Ookii.Jumbo.IO.EnumerableRecordReader`1.Progress"/> will return 0 until the reader has finished.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.EnumerableRecordReader`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.EnumerableRecordReader`1"/> class.
            </summary>
            <param name="source">The list to read from.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.EnumerableRecordReader`1.Progress">
            <summary>
            Gets the progress of the reader.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.EnumerableRecordReader`1.ReadRecordInternal">
            <summary>
            Reads a record.
            </summary>
            <returns><see langword="true"/> if an object was successfully read from the stream; <see langword="false"/> if the end of the stream or stream fragment was reached.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.EnumerableRecordReader`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.IDeserializingRawComparer">
            <summary>
            Interface for types implementing the <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/> interface that may use deserialization;
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IDeserializingRawComparer.UsesDeserialization">
            <summary>
            Gets a value indicating whether the comparer uses deserialization.
            </summary>
            <value>
            <see langword="true" /> if whether the comparer uses deserialization; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="T:Ookii.Jumbo.IO.IMultiInputRecordReader">
            <summary>
            Interface for record readers that combine the input of multiple record readers.
            </summary>
            <remarks>
            <note>
              Record readers must inherit from <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/>, not just implement this interface.
            </note>
            </remarks>
        </member>
        <member name="E:Ookii.Jumbo.IO.IMultiInputRecordReader.CurrentPartitionChanged">
            <summary>
            Event that is raised if the value of the <see cref="P:Ookii.Jumbo.IO.IMultiInputRecordReader.CurrentPartition"/> property changes.
            </summary>
        </member>
        <member name="E:Ookii.Jumbo.IO.IMultiInputRecordReader.CurrentPartitionChanging">
            <summary>
            Event raised when the value of the <see cref="P:Ookii.Jumbo.IO.IMultiInputRecordReader.CurrentPartition"/> property is about to change.
            </summary>
            <remarks>
            <para>
              If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <see langword="true"/> in the handler
              for this event, the <see cref="M:Ookii.Jumbo.IO.IMultiInputRecordReader.NextPartition"/> method will skip the indicated partition
              and move to the next one.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.IMultiInputRecordReader.TotalInputCount">
            <summary>
            Gets the total number of inputs readers that this record reader will have.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IMultiInputRecordReader.CurrentInputCount">
            <summary>
            Gets the current number of inputs that have been added to the <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/>.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IMultiInputRecordReader.AllowRecordReuse">
            <summary>
            Gets a value that indicates that this record reader is allowed to reuse record instances.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IMultiInputRecordReader.BufferSize">
            <summary>
            Gets the buffer size to use to read input files.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IMultiInputRecordReader.CompressionType">
            <summary>
            Gets the type of compression to use to read input files.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IMultiInputRecordReader.PartitionNumbers">
            <summary>
            Gets all partitions currently assigned to this reader.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IMultiInputRecordReader.CurrentPartition">
            <summary>
            Gets the partition that calls to <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/> should return records for.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.IMultiInputRecordReader.NextPartition">
            <summary>
            Moves the current partition to the next partition.
            </summary>
            <returns><see langword="true"/> if the current partition was moved to the next partition; <see langword="false"/> if there were no more partitions.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.IMultiInputRecordReader.AddInput(System.Collections.Generic.IList{Ookii.Jumbo.IO.RecordInput})">
            <summary>
            Adds the specified input to be read by this record reader.
            </summary>
            <param name="partitions">The partitions for this input.</param>
            <remarks>
            Which partitions a multi input record reader is responsible for is specified when that reader is created.
            All calls to <see cref="M:Ookii.Jumbo.IO.IMultiInputRecordReader.AddInput(System.Collections.Generic.IList{Ookii.Jumbo.IO.RecordInput})"/> must specify those exact same partitions, sorted by the partition number.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.IMultiInputRecordReader.AssignAdditionalPartitions(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Assigns additional partitions to this record reader.
            </summary>
            <param name="newPartitions">The new partitions to assign.</param>
            <remarks>
            <para>
              New partitions may only be assigned after all inputs for the existing partitions have been received.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.IO.IMultiRecordWriter`1">
            <summary>
            Interface for record writers that use partitioning.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
        </member>
        <member name="P:Ookii.Jumbo.IO.IMultiRecordWriter`1.Partitioner">
            <summary>
            Gets the partitioner.
            </summary>
            <value>The partitioner.</value>
        </member>
        <member name="T:Ookii.Jumbo.IO.IndexedQuicksort">
            <summary>
            Quicksort implementation for indexed binary buffers.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.IndexedQuicksort.Sort``1(Ookii.Jumbo.IO.RecordIndexEntry[],System.Byte[],Ookii.Jumbo.IO.IRawComparer{``0})">
            <summary>
            Sorts the specified indexed data.
            </summary>
            <param name="index">The index.</param>
            <param name="buffer">The buffer containing the data.</param>
            <param name="comparer">The <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/> for the records in the buffer.</param>
            <typeparam name="T">The type of the records in the buffer.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.IndexedQuicksort.Sort``1(Ookii.Jumbo.IO.RecordIndexEntry[],System.Byte[],Ookii.Jumbo.IO.IRawComparer{``0},System.Int32,System.Int32)">
            <summary>
            Sorts the specified indexed data.
            </summary>
            <param name="index">The index.</param>
            <param name="buffer">The buffer containing the data.</param>
            <param name="comparer">The <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/> for the records in the buffer.</param>
            <param name="offset">The offset into <paramref name="index"/> of the first item to sort.</param>
            <param name="count">The number of items in <paramref name="index"/> starting at <paramref name="offset"/> to sort.</param>
            <typeparam name="T">The type of the records in the buffer.</typeparam>
        </member>
        <member name="T:Ookii.Jumbo.IO.InnerJoinRecordReader`3">
            <summary>
            Record reader that performs a two-way inner equi-join from two sorted input record readers.
            </summary>
            <typeparam name="TOuter">The type of the records of the outer relation.</typeparam>
            <typeparam name="TInner">The type of the records of the inner relation.</typeparam>
            <typeparam name="TResult">The type of the result records.</typeparam>
            <remarks>
            <para>
              Classes inheriting from <see cref="T:Ookii.Jumbo.IO.InnerJoinRecordReader`3"/> must specify
              <see cref="T:Ookii.Jumbo.IO.InputTypeAttribute"/> attributes with both <typeparamref name="TOuter"/> and <typeparamref name="TInner"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.InnerJoinRecordReader`3.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean,System.Int32,Ookii.Jumbo.CompressionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.InnerJoinRecordReader`3"/> class.
            </summary>
            <param name="partitions">The partitions that this multi input record reader will read.</param>
            <param name="totalInputCount">The total number of input readers that this record reader will have.</param>
            <param name="allowRecordReuse"><see langword="true"/> if the record reader may reuse record instances; otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size to use to read input files.</param>
            <param name="compressionType">The compression type to us to read input files.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.InnerJoinRecordReader`3.ReadRecordInternal">
            <summary>
            Reads a record.
            </summary>
            <returns><see langword="true"/> if an object was successfully read from the stream; <see langword="false"/> if the end of the stream or stream fragment was reached.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.InnerJoinRecordReader`3.AddInput(System.Collections.Generic.IList{Ookii.Jumbo.IO.RecordInput})">
            <summary>
            Adds the specified input to be read by this record reader.
            </summary>
            <param name="partitions">The partitions for this input, in the same order as the partition list provided to the constructor.</param>
            <remarks>
            <para>
              Which partitions a multi input record reader is responsible for is specified when that reader is created or
              when <see cref="M:Ookii.Jumbo.IO.InnerJoinRecordReader`3.AssignAdditionalPartitions(System.Collections.Generic.IList{System.Int32})"/> is called. All calls to <see cref="M:Ookii.Jumbo.IO.InnerJoinRecordReader`3.AddInput(System.Collections.Generic.IList{Ookii.Jumbo.IO.RecordInput})"/> must specify those
              exact same partitions, in the same order.
            </para>
            <para>
              If you override this method, you must call the base class implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.InnerJoinRecordReader`3.AssignAdditionalPartitions(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Assigns additional partitions to this record reader.
            </summary>
            <param name="newPartitions">The new partitions to assign.</param>
            <remarks>
            <para>
              New partitions may not be assigned to this record reader, so this method always throws a <see cref="T:System.NotSupportedException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.InnerJoinRecordReader`3.Compare(`0,`1)">
            <summary>
            When implemented in a derived class, compares an object from the outer relation to one from the inner relation based on the join condition.
            </summary>
            <param name="outer">The outer relation's object.</param>
            <param name="inner">The inner relation's object.</param>
            <returns>Less than zero if <paramref name="outer"/> is smaller than the <paramref name="inner"/>; greater than zero if <paramref name="outer"/>
            is greater than <paramref name="inner"/>; zero if <paramref name="outer"/> and <paramref name="inner"/> are equal based on the join condition.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.InnerJoinRecordReader`3.CreateJoinResult(`2,`0,`1)">
            <summary>
            When implemented in a derived class, creates an object of type <typeparamref name="TResult"/> that holds the result of the join.
            </summary>
            <param name="result">An object instance to hold the result.</param>
            <param name="outer">The outer relation's object.</param>
            <param name="inner">The inner relation's object.</param>
            <returns>
              The new result object; this may be the value of <paramref name="result"/>.
            </returns>
            <remarks>
            <para>
              If <see cref="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.AllowRecordReuse"/> is <see langword="true"/>, the value of <paramref name="result"/> will be the same every time this function
              is called. It is therefore important that the implementation of this method always sets all relevant properties of the result object.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.IO.InputTypeAttribute">
            <summary>
            Specifies the accepted input types of a class deriving from <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/>.
            </summary>
            <remarks>
            If this attribute is not specified, the accepted inputs are assumed to be T.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.InputTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.InputTypeAttribute"/> class.
            </summary>
            <param name="acceptedType">The type accepted as input.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.InputTypeAttribute.AcceptedType">
            <summary>
            Gets the accepted input type.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.IO.InvertedRawComparer`1">
            <summary>
            Comparer that inverts the results of the default raw comparer.
            </summary>
            <typeparam name="T">The type to compare</typeparam>
            <remarks>
            <para>
              This comparer can be used e.g. to sort in descending order.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.InvertedRawComparer`1.Compare(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares the binary representation of two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="buffer1">The buffer containing the first object.</param>
            <param name="offset1">The offset into <paramref name="buffer1"/> where the first object starts.</param>
            <param name="count1">The number of bytes in <paramref name="buffer1"/> used by the first object.</param>
            <param name="buffer2">The buffer containing the second object.</param>
            <param name="offset2">The offset into <paramref name="buffer2"/> where the second object starts.</param>
            <param name="count2">The number of bytes in <paramref name="buffer2"/> used by the second object.</param>
            <returns>A signed integer that indicates the relative values of the first and second object.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.InvertedRawComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of the first and second object.
            </returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.IPartitioner`1">
            <summary>
            Interface for classes that can partition a range of values.
            </summary>
            <typeparam name="T">The type of object to partition.</typeparam>
        </member>
        <member name="P:Ookii.Jumbo.IO.IPartitioner`1.Partitions">
            <summary>
            Gets or sets the number of partitions.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.IPartitioner`1.GetPartition(`0)">
            <summary>
            Gets the partition for the specified value.
            </summary>
            <param name="value">The value to be partitioned.</param>
            <returns>The partition number for the specified value.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.IRawComparer`1">
            <summary>
            Defines a method that a type implements to compare the raw binary representation of two objects.
            </summary>
            <typeparam name="T">The type of the objects whose binary represenation can be compared.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.IRawComparer`1.Compare(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares the binary representation of two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="buffer1">The buffer containing the first object.</param>
            <param name="offset1">The offset into <paramref name="buffer1"/> where the first object starts.</param>
            <param name="count1">The number of bytes in <paramref name="buffer1"/> used by the first object.</param>
            <param name="buffer2">The buffer containing the second object.</param>
            <param name="offset2">The offset into <paramref name="buffer2"/> where the second object starts.</param>
            <param name="count2">The number of bytes in <paramref name="buffer2"/> used by the second object.</param>
            <returns>A signed integer that indicates the relative values of the first and second object.</returns>
            <remarks>
            <para>
              The values of <paramref name="count1"/> and <paramref name="count2"/> may be larger than the size of the record.
              The comparer should determine on its own the actual size of the record, in the same way the <see cref="T:Ookii.Jumbo.IO.IWritable"/>
              or <see cref="T:Ookii.Jumbo.IO.ValueWriter`1"/> for that record does, and use that for the comparison. You should however
              never read more bytes from the buffer than the specified count.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.IO.IRecordInputStream">
            <summary>
            Interface for input streams that offer special handling of records.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordInputStream.RecordOptions">
            <summary>
            Gets the record options applied to this stream.
            </summary>
            <value>One or more of the <see cref="T:Ookii.Jumbo.IO.RecordStreamOptions"/> values.</value>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordInputStream.StopReadingAtPosition">
            <summary>
            Gets or sets the position in the stream after which no data will be read.
            </summary>
            <value>
            	The position after which <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> method will not return any data. The default value is the length of the stream.
            </value>
            <remarks>
            <para>
              For a stream where <see cref="P:Ookii.Jumbo.IO.IRecordInputStream.RecordOptions"/> is set to <see cref="F:Ookii.Jumbo.IO.RecordStreamOptions.DoNotCrossBoundary"/> you can use this property
              to ensure that no data after the boundary is read if you only wish to read records up to the boundary.
            </para>
            <para>
              On the Jumbo DFS, crossing a block boundary will cause a network connection to be established and data to be read from
              a different data server. If you are reading records from only a single block (as is often the case for Jumbo Jet tasks)
              this property can be used to ensure that no data from the next block will be read.
            </para>
            <para>
              Setting this property to a value other than the stream length if <see cref="F:Ookii.Jumbo.IO.RecordStreamOptions.DoNotCrossBoundary"/> is not set, or
              to a value that is not on a structural boundary can cause reading to halt in the middle of a record, and is therefore not recommended.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordInputStream.IsStopped">
            <summary>
            Gets a value indicating whether this instance has stopped reading.
            </summary>
            <value>
            	<see langword="true"/> if the stream has reached the position indicated by <see cref="P:Ookii.Jumbo.IO.IRecordInputStream.StopReadingAtPosition"/>; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              If this property is <see langword="true"/> it means the next call to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> will return 0.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordInputStream.PaddingBytesSkipped">
            <summary>
            Gets the amount of padding skipped while reading from the stream.
            </summary>
            <value>The amount of padding bytes skipped.</value>
        </member>
        <member name="M:Ookii.Jumbo.IO.IRecordInputStream.OffsetFromBoundary(System.Int64)">
            <summary>
            Determines the offset of the specified position from the directly preceding structural boundary (e.g. a block boundary on the DFS).
            </summary>
            <param name="position">The position.</param>
            <returns>
            	The offset from the structural boundary that directly precedes the specified position.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.IRecordInputStream.AreInsideSameBoundary(System.Int64,System.Int64)">
            <summary>
            Determines whether the range between two specified positions does not cross a structural boundary (e.g. a block boundary on the DFS).
            </summary>
            <param name="position1">The first position.</param>
            <param name="position2">The second position.</param>
            <returns>
                <see langword="true"/> if the <paramref name="position1"/> and <paramref name="position2"/> fall inside the same boundaries (e.g. if
                both positions are in the same block in the DFS); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.IRecordOutputStream">
            <summary>
            Interface for streams that offer special handling of records.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordOutputStream.RecordOptions">
            <summary>
            Gets the options applied to records in the stream.
            </summary>
            <value>One or more of the <see cref="T:Ookii.Jumbo.IO.RecordStreamOptions"/> values.</value>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordOutputStream.RecordsSize">
            <summary>
            Gets the amount of the stream that is actually used by records.
            </summary>
            <value>The length of the stream minus padding.</value>
        </member>
        <member name="M:Ookii.Jumbo.IO.IRecordOutputStream.MarkRecord">
            <summary>
            Indicates that the current position of the stream is a record boundary.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.IO.IRecordReader">
            <summary>
            Non-generic interface for record readers.
            </summary>
            <remarks>
            <note>
              Record readers must inherit from <see cref="T:Ookii.Jumbo.IO.RecordReader`1"/>, not just implement this interface.
            </note>
            </remarks>
        </member>
        <member name="E:Ookii.Jumbo.IO.IRecordReader.HasRecordsChanged">
            <summary>
            Occurs when the value of the <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property changes.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordReader.RecordsRead">
            <summary>
            Gets the number of records that has been read by this record reader.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordReader.InputBytes">
            <summary>
            Gets the size of the records before deserialization.
            </summary>
            <value>
            The size of the records before deserialization, or 0 if the records were not read from a serialized source.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordReader.BytesRead">
            <summary>
            Gets the actual number of bytes read from the input.
            </summary>
            <value>
            The number of bytes read from the input.
            </value>
            <remarks>
            <para>
              This is the value of <see cref="P:Ookii.Jumbo.IO.IRecordReader.InputBytes"/>, adjusted for compression (if applicable) and including any additional data read by the record reader (if any).
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordReader.Progress">
            <summary>
            Gets the progress for the task, between 0 and 1.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordReader.CurrentRecord">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordReader.SourceName">
            <summary>
            Gets or sets the an informational string indicating the source of the records.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordReader.HasRecords">
            <summary>
            Gets a value that indicates whether there are records available on the data source that this reader is reading from.
            </summary>
            <value>
            	<see langword="true"/> if this instance has records available and is not waiting for input; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              The <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property indicates if the record reader is waiting for an external source to provide it
              with data, or has data available from which it can read records immediately. If this property
              is <see langword="true"/>, it indicates that the <see cref="M:Ookii.Jumbo.IO.IRecordReader.ReadRecord"/> method will not
              block waiting for an external event (it may, however, still block waiting for IO).
            </para>
            <para>
              For example, a multi-input record reader may use the <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property to indicate whether any inputs
              have been added yet. If this multi-input record reader is reading from a file channel, this could
              be used to determine if the reader is waiting for data to be shuffled or if it is available now.
            </para>
            <para>
              If the <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property is <see langword="false"/>, it is still safe to call <see cref="M:Ookii.Jumbo.IO.IRecordReader.ReadRecord"/>,
              there is just no guarantee that the call will return immediately.
            </para>
            <para>
              If the <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property is <see langword="false"/> and <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasFinished"/> is <see langword="false"/>,
              then the <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property must become <see langword="true"/> at some point, provided there are no error
              conditions.
            </para>
            <para>
              If the <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property is <see langword="true"/>, the next call to <see cref="M:Ookii.Jumbo.IO.IRecordReader.ReadRecord"/> can
              still return <see langword="false"/>. After <see cref="M:Ookii.Jumbo.IO.IRecordReader.ReadRecord"/> has returned <see langword="false"/>, the
              <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property will also be <see langword="false"/>
            </para>
            <para>
              When the <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property changes, the <see cref="E:Ookii.Jumbo.IO.IRecordReader.HasRecordsChanged"/> event will be raised.
            </para>
            <para>
              For multi-input record readers, this property applies only to the current partition; if the current partition
              changes, the value of the <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> property should be reset.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordReader.HasFinished">
            <summary>
            Gets a value indicating whether this instance has read all records.
            </summary>
            <value>
            	<see langword="true"/> if this instance has finished; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordReader.ReadTime">
            <summary>
            Gets the time spent reading.
            </summary>
            <value>
            The time spent reading.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.IRecordReader.ReadRecord">
            <summary>
            Reads a record.
            </summary>
            <returns><see langword="true"/> if an object was successfully read from the stream; <see langword="false"/> if the end of the stream or stream fragment was reached.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.IRecordWriter">
            <summary>
            Non-generic interface for record writers.
            </summary>
            <remarks>
            <note>
              Record writers must inherit from <see cref="T:Ookii.Jumbo.IO.RecordWriter`1"/>, not just implement this interface.
            </note>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordWriter.RecordsWritten">
            <summary>
            Gets the total number of records written by this record writer.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordWriter.OutputBytes">
            <summary>
            Gets the size of the written records after serialization.
            </summary>
            <value>
            The size of the written records after serialization, or 0 if this writer did not serialize the records.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordWriter.BytesWritten">
            <summary>
            Gets the number of bytes that were actually written to the output.
            </summary>
            <value>
            The number of bytes written to the output.
            </value>
            <remarks>
            <para>
              This is the value of <see cref="P:Ookii.Jumbo.IO.IRecordWriter.OutputBytes"/>, adjusted for compression (if applicable) and including any additional data written by the record writer (if any).
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.IRecordWriter.WriteTime">
            <summary>
            Gets the time spent writing.
            </summary>
            <value>
            The time spent writing.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.IRecordWriter.WriteRecord(System.Object)">
            <summary>
            Writes a record.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.IRecordWriter.FinishWriting">
            <summary>
            Informs the record writer that no further records will be written.
            </summary>
            <remarks>
            <para>
              This method is intended for record writers that need to perform additional writing to finalize their output. In Jumbo Jet, this
              method will be called before the writer's metrics are collected so they can include these additional writes.
            </para>
            <para>
              It is allowed to dispose any output streams or other objects related to the output when this method is called, as no more
              writes will occur after that point. However, the <see cref="P:Ookii.Jumbo.IO.IRecordWriter.RecordsWritten"/> <see cref="P:Ookii.Jumbo.IO.IRecordWriter.BytesWritten"/> and <see cref="P:Ookii.Jumbo.IO.IRecordWriter.OutputBytes"/>
              properties must still return the correct values after <see cref="M:Ookii.Jumbo.IO.IRecordWriter.FinishWriting"/> has been called.
            </para>
            <para>
              The <see cref="M:System.IDisposable.Dispose"/> implementation for <see cref="T:Ookii.Jumbo.IO.RecordWriter`1"/> will call this method.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.IO.IValueWriter`1">
            <summary>
            Interface for binary serialization of types that don't support <see cref="T:Ookii.Jumbo.IO.IWritable"/>.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <remarks>
            <para>
              Jumbo provides its own simple, light-weight serialization protocol that is primarily
              used by the <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> and <see cref="T:Ookii.Jumbo.IO.BinaryRecordWriter`1"/>
              classes (although it is also used in a few other places).
            </para>
            <para>
              Normally, classes support this protocol by implementing the <see cref="T:Ookii.Jumbo.IO.IWritable"/>
              interface. However, the <see cref="T:Ookii.Jumbo.IO.IWritable"/> interface cannot be used on value types
              (structs) because of the semantics of calling interface methods that modify the object's
              state on a value type.
            </para>
            <para>
              To provide serialization support for a value type, you must create a class implementing
              <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> for that value type, and mark the value type with the
              <see cref="T:Ookii.Jumbo.IO.ValueWriterAttribute"/>. Although you can use <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>
              for reference types as well, this is not recommended because <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>
              doesn't support record reuse.
            </para>
            <para>
              Jumbo also provides <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> implementations for several built-in
              framework types.
            </para>
            <para>
              To access the <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> implementation for a type, use the
              <see cref="T:Ookii.Jumbo.IO.ValueWriter`1" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.IValueWriter`1.Write(`0,System.IO.BinaryWriter)">
            <summary>
            Writes the specified value to the specified writer.
            </summary>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.IValueWriter`1.Read(System.IO.BinaryReader)">
            <summary>
            Reads a value from the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.IWritable">
            <summary>
            Interface for objects that can be serialized using the <see cref="T:System.IO.BinaryWriter"/>
            and <see cref="T:System.IO.BinaryReader"/> classes.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Ookii.Jumbo.IO.IWritable"/> interface provides a simple, light-weight serialization protocol that
              is used primarily by the <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> and <see cref="T:Ookii.Jumbo.IO.BinaryRecordWriter`1"/>
              class (but is also used in a few other instances).
            </para>
            <para>
              Unlike the serialization provided by the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
              class, <see cref="T:Ookii.Jumbo.IO.IWritable"/> serialization is done entirely by the class that implements the
              interface. There are no built-in checks to see if the type being deserialized from a stream
              matches the type that was serialized to it. It is up to the implementation of the <see cref="M:Ookii.Jumbo.IO.IWritable.Write(System.IO.BinaryWriter)"/>
              and <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> methods to guarantee binary compatibility.
            </para>
            <para>
              For this reason, it is recommended to use <see cref="T:Ookii.Jumbo.IO.IWritable"/> serialization only for
              short-time storage where the performance of serializing and deserializing is important.
              Its primary usage in Jumbo (intermediate data for Jumbo Jet jobs) fits these criteria.
            </para>
            <para>
              Types that implement <see cref="T:Ookii.Jumbo.IO.IWritable"/> must be reference types (classes). To
              support serialization of value types, you must implement a <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>
              for those types and mark them with the <see cref="T:Ookii.Jumbo.IO.ValueWriterAttribute"/>.
            </para>
            <para>
              The <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> creates new record instances by using the <see cref="M:System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)"/>
              method. This means the object's constructors are not invoked, so the <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> implementation may not make any
              assumptions about the state of the class, and must guarantee the object is in a consistent state after
              it finishes.
            </para>
            <para>
              When record reuse is enabled, the <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> method will be called multiple times on
              the same instance. The <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> method must replace the entire internal state
              of the object with that of the new record. If any of the object's internal state is stored
              in reference types, it's recommended to reuse object instances as much as possible.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.IWritable.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the object to the specified writer.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to serialize the object to.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)">
            <summary>
            Reads the object from the specified reader.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to deserialize the object from.</param>
            <remarks>
            <para>
              This object instance may have been created using <see cref="M:System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)"/>
              so the <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> method may not make any assumptions about the internal state of the object, and must
              ensure the object is in a consistent state afterwards.
            </para>
            <para>
              When record reuse is enabled, the <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> method will be called multiple times on
              the same instance. The <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> method must replace the entire internal state
              of the object with that of the new record. If any of the object's internal state is stored
              in reference types, it's recommended to reuse object instances as much as possible.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.IO.LineRecordReader">
            <summary>
            Reads records from a stream using line breaks as the record boundary.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.LineRecordReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.LineRecordReader"/> class that reads from the specified stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.LineRecordReader.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.LineRecordReader"/> class that reads the specified range from the specified stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="offset">The position in the stream to start reading.</param>
            <param name="size">The number of bytes to read from the stream.</param>
            <param name="allowRecordReuse"><see langword="true"/> if the record reader may re-use the same <see cref="T:Ookii.Jumbo.IO.Utf8String"/> instance for every
            record; <see langword="false"/> if it must create a new instance for every record.</param>
            <remarks>
            <para>
              The reader will start reading at <paramref name="offset"/>. If <paramref name="offset"/> is larger than zero, the reader
              will seek ahead to the start of the next record and read from there.
            </para>
            <para>
              The reader will read a whole number of records until the start of the next record falls
              after <paramref name="offset"/> + <paramref name="size"/>. Because of this, the reader can
              read more than <paramref name="size"/> bytes.
            </para>
            <para>
              The reader will check if <paramref name="stream"/> implements <see cref="T:Ookii.Jumbo.IO.IRecordInputStream"/> with <see cref="P:Ookii.Jumbo.IO.IRecordInputStream.RecordOptions"/>
              set to <see cref="F:Ookii.Jumbo.IO.RecordStreamOptions.DoNotCrossBoundary"/>. If so, if <paramref name="offset"/> falls on a structural boundary
              the reader will not seek ahead because it knows structural boundaries are record boundaries; if <paramref name="offset"/> + <paramref name="size"/> falls
              on a structural boundary, the reader is guaranteed to not read beyond <paramref name="offset"/> + <paramref name="size"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.LineRecordReader.InputBytes">
            <summary>
            Gets the size of the records before deserialization.
            </summary>
            <value>
            The number of bytes read from the stream.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.LineRecordReader.ReadRecordInternal">
            <summary>
            Reads a record.
            </summary>
            <returns><see langword="true"/> if an object was successfully read from the stream; <see langword="false"/> if the end of the stream or stream fragment was reached.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.ListRecordWriter`1">
            <summary>
            Record writer that writes the items to a list.
            </summary>
            <typeparam name="T">The type of record.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.ListRecordWriter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.ListRecordWriter`1"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.ListRecordWriter`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.ListRecordWriter`1"/> class.
            </summary>
            <param name="cloneRecords"><see langword="true"/> to clone records before adding them to the list; otherwise, <see langword="false"/>.</param>
            <remarks>
            <para>
              If <paramref name="cloneRecords"/> is <see langword="true"/>, the type <typeparamref name="T"/> must implement <see cref="T:System.ICloneable"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.ListRecordWriter`1.List">
            <summary>
            Gets the list to which the records are written.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.ListRecordWriter`1.WriteRecordInternal(`0)">
            <summary>
            Writes a record.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.MemoryBufferStream">
            <summary>
            A reusable stream that reads from a segment of a memory buffer.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.MemoryBufferStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Ookii.Jumbo.IO.MemoryBufferStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Ookii.Jumbo.IO.MemoryBufferStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.MemoryBufferStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="P:Ookii.Jumbo.IO.MemoryBufferStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
              
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:Ookii.Jumbo.IO.MemoryBufferStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
              
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Ookii.Jumbo.IO.MemoryBufferStream.Reset(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Resets the stream to use a new buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.MemoryBufferStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.MemoryBufferStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.MemoryBufferStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.MemoryBufferStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.MemoryBufferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.MultiInputRecordReader">
            <summary>
            Provides methods for working with multi-input record readers.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader.GetAcceptedInputTypes(System.Type)">
            <summary>
            Gets the accepted input types for a multi-input record reader.
            </summary>
            <param name="type">The type of multi-input record reader.</param>
            <returns>A list of accepted types.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.MultiInputRecordReader`1">
            <summary>
            Base class for record readers that combine multiple inputs.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <remarks>
            <para>
              Depending on the type of record reader, the records of the input record readers might not
              need to read records of type <typeparamref name="T"/>.
            </para>
            <para>
              If you accept inputs of types other than <typeparamref name="T"/>, you must specify that using the <see cref="T:Ookii.Jumbo.IO.InputTypeAttribute"/>.
            </para>
            <para>
              The initial value of <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> will be <see langword="false"/>. It is up to the deriving class
              to set it to <see langword="true"/> when appropriate.
            </para>
            <note>
              While the <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.AddInput(System.Collections.Generic.IList{Ookii.Jumbo.IO.RecordInput})"/>, <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.WaitForInputs(System.Int32,System.Int32)"/> 
              and <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInputReader(System.Int32)"/> methods are thread safe, no other methods of this class are guaranteed to be thread
              safe, and derived classes are not required to make <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecordInternal"/> thread safe.
              Essentially, you may have only one thread reading from the <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/>, while one or
              more other threads add inputs to it.
            </note>
            </remarks>
        </member>
        <member name="E:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartitionChanged">
            <summary>
            Event raised when the value of the <see cref="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartition"/> property changes.
            </summary>
        </member>
        <member name="E:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartitionChanging">
            <summary>
            Event raised when the value of the <see cref="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartition"/> property is about to change.
            </summary>
            <remarks>
            <para>
              If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <see langword="true"/> in the handler
              for this event, the <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.NextPartition"/> method will skip the indicated partition
              and move to the next one.
            </para>
            <para>
              The <see cref="E:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartitionChanged"/> event will not be raised for partitions
              that were skipped in this fashion.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean,System.Int32,Ookii.Jumbo.CompressionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/> class.
            </summary>
            <param name="partitions">The partitions that this multi input record reader will read.</param>
            <param name="totalInputCount">The total number of input readers that this record reader will have.</param>
            <param name="allowRecordReuse"><see langword="true"/> if the record reader may reuse record instances; otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size to use to read input files.</param>
            <param name="compressionType">The compression type to us to read input files.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.TotalInputCount">
            <summary>
            Gets the total number of inputs readers that this record reader will have.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.AllowRecordReuse">
            <summary>
            Gets a value that indicates that this record reader is allowed to reuse record instances.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.BufferSize">
            <summary>
            Gets the buffer size to use to read input files.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.CompressionType">
            <summary>
            Gets the type of compression to use to read input files.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.Progress">
            <summary>
            Gets the combined progress of the record readers.
            </summary>
            <value>A value between 0 and 1 that indicates the overall progress of the <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/>.</value>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.InputBytes">
            <summary>
            Gets the size of the records before deserialization of all record readers.
            </summary>
            <value>
            The size of the records before deserialization, or 0 if the records were not read from a serialized source.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.BytesRead">
            <summary>
            Gets the actual number of bytes read from the input.
            </summary>
            <value>
            The number of bytes read from the input.
            </value>
            <remarks>
            <para>
              This is the value of <see cref="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.InputBytes"/>, adjusted for compression (if applicable) and including any additional data read by the record reader (if any).
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentInputCount">
            <summary>
            Gets the current number of inputs that have been added to the <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/> for the currently active set of partitions.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.PartitionNumbers">
            <summary>
            Gets the partition numbers assigned to this reader.
            </summary>
            <value>The partition numbers assigned to this reader.</value>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.PartitionCount">
            <summary>
            Gets the number of partitions assigned to this reader.
            </summary>
            <value>The number of partitions assigned to this reader.</value>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartition">
            <summary>
            Gets or sets the partition that calls to <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/> should return records for.
            </summary>
            <value>The current partition.</value>
            <para>
            The current partition determines which partition the <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/> function should return records for.
            Deriving classes should use this when implementing <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecordInternal"/>.
            </para>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiInputRecordReader`1.IsDisposed">
            <summary>
            Gets a value that indicates whether the object has been disposed.
            </summary>
            <value>
            	<see langword="true"/> if this instance is disposed; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.NextPartition">
            <summary>
            Moves the current partition to the next partition.
            </summary>
            <returns><see langword="true"/> if the current partition was moved to the next partition; <see langword="false"/> if there were no more partitions.</returns>
            <remarks>
            <para>
              The current partition determines which partition the <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/> function should return records for.
              Deriving classes should use this when implementing <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecordInternal"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.AddInput(System.Collections.Generic.IList{Ookii.Jumbo.IO.RecordInput})">
            <summary>
            Adds the specified input to be read by this record reader.
            </summary>
            <param name="partitions">The partitions for this input, in the same order as the partition list provided to the constructor.</param>
            <remarks>
            <para>
              Which partitions a multi input record reader is responsible for is specified when that reader is created or
              when <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.AssignAdditionalPartitions(System.Collections.Generic.IList{System.Int32})"/> is called. All calls to <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.AddInput(System.Collections.Generic.IList{Ookii.Jumbo.IO.RecordInput})"/> must specify those
              exact same partitions, in the same order.
            </para>
            <para>
              If you override this method, you must call the base class implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.AssignAdditionalPartitions(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Assigns additional partitions to this record reader.
            </summary>
            <param name="newPartitions">The new partitions to assign.</param>
            <remarks>
            <para>
              New partitions may only be assigned after all inputs for the existing partitions have been received.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.WaitForInputs(System.Int32,System.Int32)">
            <summary>
            Waits until the specified number of inputs becomes available for all currently active partitions.
            </summary>
            <param name="inputCount">The number of inputs to wait for.</param>
            <param name="timeout">The maximum amount of time to wait, in milliseconds, or <see cref="F:System.Threading.Timeout.Infinite"/> to wait indefinitely.</param>
            <returns><see langword="true"/> if a new input is available; <see langword="false"/> if the timeout expired.</returns>
            <remarks>
            <para>
              This function will wait for the specified number of inputs on the last group of partitions assigned to the reader via
              <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.AssignAdditionalPartitions(System.Collections.Generic.IList{System.Int32})"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInputReader(System.Int32)">
            <summary>
            Gets the record reader for the specified input of the current partition.
            </summary>
            <param name="index">The index of the input.</param>
            <returns>An instance of a class implementing <see cref="T:Ookii.Jumbo.IO.IRecordReader"/> for the specified input.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInputReader(System.Int32,System.Int32)">
            <summary>
            Returns the record reader for the specified partition and input.
            </summary>
            <param name="partition">The partition of the reader to return.</param>
            <param name="index">The index of the record reader to return.</param>
            <returns>An instance of a class implementing <see cref="T:Ookii.Jumbo.IO.IRecordReader"/> for the specified input.</returns>
            <remarks>
            <para>
              Once a call to <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInputReader(System.Int32,System.Int32)"/> has returned an input, subsequent
              calls with the same <paramref name="partition"/> and <paramref name="index"/> are guaranteed to return the same value.
            </para>
            <para>
              Two calls to <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInputReader(System.Int32,System.Int32)"/> with the same <paramref name="index"/> but a different <paramref name="partition"/>
              aren't guaranteed to return inputs from the same source.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInputReader(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the record reader for the specified partition and input.
            </summary>
            <param name="partition">The partition of the reader to return.</param>
            <param name="index">The index of the record reader to return.</param>
            <param name="memoryOnly"><see langword="true"/> to return only inputs that are stored in memory; otherwise, <see langword="false"/>.</param>
            <returns>
            An instance of a class implementing <see cref="T:Ookii.Jumbo.IO.IRecordReader"/> for the specified input, or <see langword="null"/> if <paramref name="memoryOnly"/>
            was <see langword="true"/> and the input was not stored in memory.
            </returns>
            <remarks>
            <para>
              Because the <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/> tries to keep the inputs that in memory in front of the inputs that aren't, if
              a call to <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInputReader(System.Int32,System.Int32,System.Boolean)"/> returned <see langword="null"/>, subsequent calls with the same <paramref name="partition"/>
              and <paramref name="index"/> might not return <see langword="null"/>.
            </para>
            <para>
              Once a call to <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInputReader(System.Int32,System.Int32,System.Boolean)"/> has returned a value other than <see langword="null"/>, subsequent
              calls with the same <paramref name="partition"/> and <paramref name="index"/> are guaranteed to return the same value.
            </para>
            <para>
              Two calls to <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInputReader(System.Int32,System.Int32,System.Boolean)"/> with the same <paramref name="index"/> but a different <paramref name="partition"/>
              aren't guaranteed to return inputs from the same source.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInput(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the specified input.
            </summary>
            <param name="partition">The partition of the input to return.</param>
            <param name="index">The index of the record input to return.</param>
            <param name="memoryOnly"><see langword="true"/> to return only inputs that are stored in memory; otherwise, <see langword="false"/>.</param>
            <returns>
            The <see cref="T:Ookii.Jumbo.IO.RecordInput"/> instance for the input, or <see langword="null"/> if <paramref name="memoryOnly"/>
            was <see langword="true"/> and the input was not stored in memory.
            </returns>
            <remarks>
            <para>
              Because the <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/> tries to keep the inputs that in memory in front of the inputs that aren't, if
              a call to <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInput(System.Int32,System.Int32,System.Boolean)"/> returned <see langword="null"/>, subsequent calls with the same <paramref name="partition"/>
              and <paramref name="index"/> might not return <see langword="null"/>.
            </para>
            <para>
              Once a call to <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInput(System.Int32,System.Int32,System.Boolean)"/> has returned a value other than <see langword="null"/>, subsequent
              calls with the same <paramref name="partition"/> and <paramref name="index"/> are guaranteed to return the same value.
            </para>
            <para>
              Two calls to <see cref="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.GetInput(System.Int32,System.Int32,System.Boolean)"/> with the same <paramref name="index"/> but a different <paramref name="partition"/>
              aren't guaranteed to return inputs from the same source.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.OnCurrentPartitionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartitionChanged"/> event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.OnCurrentPartitionChanging(Ookii.Jumbo.IO.CurrentPartitionChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartitionChanging"/> event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiInputRecordReader`1.CheckDisposed">
            <summary>
            Throws a <see cref="T:System.ObjectDisposedException"/> if the object has been disposed.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.IO.MultiRecordReader`1">
            <summary>
            Record reader that reads from multiple other record readers sequentially.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiRecordReader`1.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean,System.Int32,Ookii.Jumbo.CompressionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.MultiRecordReader`1"/> class.
            </summary>
            <param name="partitions">The partitions that this multi input record reader will read.</param>
            <param name="totalInputCount">The total number of input readers that this record reader will have.</param>
            <param name="allowRecordReuse"><see langword="true"/> if the record reader may reuse record instances; otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size to use to read input files.</param>
            <param name="compressionType">The compression type to us to read input files.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiRecordReader`1.TimeWaiting">
            <summary>
            Gets the amount of time the record reader spent waiting for input to become available.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiRecordReader`1.ReadRecordInternal">
            <summary>
            Reads a record.
            </summary>
            <returns><see langword="true"/> if an object was successfully read from the stream; <see langword="false"/> if the end of the stream or stream fragment was reached.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiRecordReader`1.OnCurrentPartitionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartitionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiRecordReader`1.AddInput(System.Collections.Generic.IList{Ookii.Jumbo.IO.RecordInput})">
            <summary>
            Adds the input.
            </summary>
            <param name="partitions">The partitions.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiRecordReader`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.MultiRecordWriter`1">
            <summary>
            A record writer that paritions the records over multiple record writers.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiRecordWriter`1.#ctor(System.Collections.Generic.IEnumerable{Ookii.Jumbo.IO.RecordWriter{`0}},Ookii.Jumbo.IO.IPartitioner{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.MultiRecordWriter`1"/> class.
            </summary>
            <param name="writers">The writers to write the values to.</param>
            <param name="partitioner">The partitioner used to decide which writer to use for each value.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiRecordWriter`1.Writers">
            <summary>
            Gets the record writers that this <see cref="T:Ookii.Jumbo.IO.MultiRecordWriter`1"/> is writing to.
            </summary>
            <remarks>
            <note>
              Writing directly to any of these writers breaks the partitioning.
            </note>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiRecordWriter`1.Partitioner">
            <summary>
            Gets the partitioner.
            </summary>
            <value>The partitioner.</value>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiRecordWriter`1.OutputBytes">
            <summary>
            Gets the total number of bytes written by each writer.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.MultiRecordWriter`1.BytesWritten">
            <summary>
            Gets the number of bytes written.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiRecordWriter`1.FinishWriting">
            <summary>
            Informs the record writer that no further records will be written.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiRecordWriter`1.WriteRecordInternal(`0)">
            <summary>
            When implemented in a derived class, writes a record to one of the underlying record writers.
            </summary>
            <param name="record">The record to write to the stream.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.MultiRecordWriter`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.MultiRecordWriter`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
            <remarks>
            If <paramref name="disposing"/> is <see langword="true"/>, this will dispose all the contained record writers.
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.IO.Pair">
            <summary>
            Utility class for creating <see cref="T:Ookii.Jumbo.IO.Pair`2"/> instances.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair.MakePair``2(``0,``1)">
            <summary>
            Creates a pair with the specified key and value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="key">The key. May be <see langword="null"/> if <typeparamref name="TKey"/> is a reference type.</param>
            <param name="value">The value. May be <see langword="null"/> if <typeparamref name="TValue"/> is a reference type.</param>
            <returns>An instance of <see cref="T:Ookii.Jumbo.IO.Pair`2"/>.</returns>
            <remarks>
            <para>
              This function can be used to create a pair using type inference for the key and value types so you do not have to explicitly specify them.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.IO.Pair`2">
            <summary>
            Defines a key/value pair that is mutable and supports Jumbo's <see cref="T:Ookii.Jumbo.IO.IWritable"/> serialization protocol.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <remarks>
            <para>
              Jumbo does not support the use of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> as a record type. You must use <see cref="T:Ookii.Jumbo.IO.Pair`2"/> instead.
            </para>
            <para>
              The <see cref="T:System.IComparable`1"/> implementation of this class uses the key only; it ignores the value. <see cref="T:System.IEquatable`1"/> does use
              both the key and value.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.Pair`2"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.Pair`2"/> class with the specified key and value.
            </summary>
            <param name="key">The key of the key/value pair.</param>
            <param name="value">The value of the key/value pair.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.Pair`2.Key">
            <summary>
            Gets or sets the key in the key/value pair.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.Pair`2.Value">
            <summary>
            Gets or sets the value in the key/value pair.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Ookii.Jumbo.IO.Pair`2"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Ookii.Jumbo.IO.Pair`2"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:Ookii.Jumbo.IO.Pair`2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:Ookii.Jumbo.IO.Pair`2"/> based on the key of the underlying <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.op_Equality(Ookii.Jumbo.IO.Pair{`0,`1},Ookii.Jumbo.IO.Pair{`0,`1})">
            <summary>
            Determines whether two specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/> objects have the same value.
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="left"/> is equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.op_Inequality(Ookii.Jumbo.IO.Pair{`0,`1},Ookii.Jumbo.IO.Pair{`0,`1})">
            <summary>
            Determines whether two specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/> objects have different values.
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="left"/> is different from <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.op_LessThan(Ookii.Jumbo.IO.Pair{`0,`1},Ookii.Jumbo.IO.Pair{`0,`1})">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/> is less than another specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.op_LessThanOrEqual(Ookii.Jumbo.IO.Pair{`0,`1},Ookii.Jumbo.IO.Pair{`0,`1})">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/> is less than or equal to another specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.op_GreaterThan(Ookii.Jumbo.IO.Pair{`0,`1},Ookii.Jumbo.IO.Pair{`0,`1})">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/> is greater than another specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.op_GreaterThanOrEqual(Ookii.Jumbo.IO.Pair{`0,`1},Ookii.Jumbo.IO.Pair{`0,`1})">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/> is greater than or equal to another specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Pair`2"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the object to the specified writer.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to serialize the object to.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.Read(System.IO.BinaryReader)">
            <summary>
            Reads the object from the specified reader.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to deserialize the object from.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.ToString">
            <summary>
            Gets a string representation of the current <see cref="T:Ookii.Jumbo.IO.Pair`2"/>.
            </summary>
            <returns>A string representation of the current <see cref="T:Ookii.Jumbo.IO.Pair`2"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.CompareTo(Ookii.Jumbo.IO.Pair{`0,`1})">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that 
            indicates whether the current instance precedes, follows, or occurs in the same position in the 
            sort order as the other object. 
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Pair`2.Equals(Ookii.Jumbo.IO.Pair{`0,`1})">
            <summary>
            Determines whether the specified <see cref="T:Ookii.Jumbo.IO.Pair`2"/> is equal to the current <see cref="T:Ookii.Jumbo.IO.Pair`2"/>.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Ookii.Jumbo.IO.Pair`2"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:Ookii.Jumbo.IO.Pair`2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.PairRawComparer`2">
            <summary>
            Raw comparer for the <see cref="T:Ookii.Jumbo.IO.Pair`2"/> class.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.PairRawComparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.PairRawComparer`2"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.PairRawComparer`2.#ctor(Ookii.Jumbo.IO.IRawComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.PairRawComparer`2"/> class.
            </summary>
            <param name="comparer">The key comparer.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.PairRawComparer`2.Compare(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares the binary representation of two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="buffer1">The buffer containing the first object.</param>
            <param name="offset1">The offset into <paramref name="buffer1"/> where the first object starts.</param>
            <param name="count1">The number of bytes in <paramref name="buffer1"/> used by the first object.</param>
            <param name="buffer2">The buffer containing the second object.</param>
            <param name="offset2">The offset into <paramref name="buffer2"/> where the second object starts.</param>
            <param name="count2">The number of bytes in <paramref name="buffer2"/> used by the second object.</param>
            <returns>A signed integer that indicates the relative values of the first and second object.</returns>
            <remarks>
            <para>
              The values of <paramref name="count1"/> and <paramref name="count2"/> may be larger than the size of the record.
              The comparer should determine on its own the actual size of the record, in the same way the <see cref="T:Ookii.Jumbo.IO.IWritable"/>
              or <see cref="T:Ookii.Jumbo.IO.ValueWriter`1"/> for that record does, and use that for the comparison. You should however
              never read more bytes from the buffer than the specified count.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.PairRawComparer`2.Compare(Ookii.Jumbo.IO.Pair{`0,`1},Ookii.Jumbo.IO.Pair{`0,`1})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of the first and second object.
            </returns>
        </member>
        <member name="P:Ookii.Jumbo.IO.PairRawComparer`2.UsesDeserialization">
            <summary>
            Gets a value indicating whether the comparer uses deserialization.
            </summary>
            <value>
            <see langword="true" /> if whether the comparer uses deserialization; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="T:Ookii.Jumbo.IO.RawComparer`1">
            <summary>
            Provides comparison of raw records.
            </summary>
            <typeparam name="T">The type of the objects being compared.</typeparam>
            <remarks>
            <para>
              If the type specified by <typeparamref name="T"/> has its own custom <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/>, that will be used for the comparison.
              Otherwise, the records will be deserialized and comparer using <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RawComparer`1.Comparer">
            <summary>
            Gets the <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/> instance, or <see langword="null"/> if the <typeparamref name="T"/> doesn't have
            a raw comparer.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawComparer`1.CreateComparer">
            <summary>
            Creates a raw comparer.
            </summary>
            <returns>
            The raw comparer for the type, or a comparer that deserializes in order to compare if the type has no raw comparer.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawComparer`1.CreateDeserializingComparer(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a deserializing comparer using the specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns>A comparer that deserializes in order to compare if the type.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.RawComparerAttribute">
            <summary>
            Specifies the <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/> implementation for a type.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawComparerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RawComparerAttribute"/> class.
            </summary>
            <param name="rawComparerTypeName">The type name of the type implementing <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawComparerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RawComparerAttribute"/> class.
            </summary>
            <param name="rawComparerTypeName">The type that implements <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/>.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.RawComparerAttribute.RawComparerTypeName">
            <summary>
            Gets the name of the type that implements <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/>.
            </summary>
            <value>
            The name of a type that implements <see cref="T:Ookii.Jumbo.IO.IRawComparer`1"/>.
            </value>
        </member>
        <member name="T:Ookii.Jumbo.IO.RawComparerHelper">
            <summary>
            Provides helper methods for implementing raw comparers.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawComparerHelper.Compare``1(Ookii.Jumbo.IO.IRawComparer{``0},Ookii.Jumbo.IO.RawRecord,Ookii.Jumbo.IO.RawRecord)">
            <summary>
            Compares the binary representation of two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="self">The comparer to use.</param>
            <param name="record1">The first record.</param>
            <param name="record2">The second record.</param>
            <returns>
            A signed integer that indicates the relative values of the first and second object.
            </returns>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawComparerHelper.CompareBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Helper method to compare a range of bytes.
            </summary>
            <param name="buffer1">The buffer containing the first object.</param>
            <param name="offset1">The offset into <paramref name="buffer1"/> where the first object starts.</param>
            <param name="count1">The number of bytes in <paramref name="buffer1"/> used by the first object.</param>
            <param name="buffer2">The buffer containing the second object.</param>
            <param name="offset2">The offset into <paramref name="buffer2"/> where the second object starts.</param>
            <param name="count2">The number of bytes in <paramref name="buffer2"/> used by the second object.</param>
            <returns>A signed integer that indicates the relative values of the first and second object.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawComparerHelper.CompareBytesWith7BitEncodedLength(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Helper method to compare a range of bytes with a 7-bit encoded length before the range.
            </summary>
            <param name="buffer1">The buffer containing the first object.</param>
            <param name="offset1">The offset into <paramref name="buffer1"/> where the first object starts.</param>
            <param name="count1">The number of bytes in <paramref name="buffer1"/> used by the first object.</param>
            <param name="buffer2">The buffer containing the second object.</param>
            <param name="offset2">The offset into <paramref name="buffer2"/> where the second object starts.</param>
            <param name="count2">The number of bytes in <paramref name="buffer2"/> used by the second object.</param>
            <returns>A signed integer that indicates the relative values of the first and second object.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.RawRecord">
            <summary>
            Represents a serialized representation of a record.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RawRecord"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawRecord.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RawRecord"/> class.
            </summary>
            <param name="buffer">The buffer containing the record.</param>
            <param name="offset">The offset in <paramref name="buffer"/> at which the record starts.</param>
            <param name="count">The number of bytes in <paramref name="buffer"/> for the record.</param>
            <remarks>
            <para>
              The value of <paramref name="buffer"/> will be stored in this instance and returned by the <see cref="P:Ookii.Jumbo.IO.RawRecord.Buffer"/> property.
              Any changes made to the contents of the buffer after calling <see cref="M:Ookii.Jumbo.IO.RawRecord.Reset(System.Byte[],System.Int32,System.Int32)"/> will be reflected in this instance.
            </para>
            <note>
              Calling the <see cref="M:Ookii.Jumbo.IO.RawRecord.Read(System.IO.BinaryReader)"/> method may overwrite the contents of the current buffer at offset zero, or allocate a new one if that buffer
              is not big enough.
            </note>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RawRecord.Buffer">
            <summary>
            Gets the buffer containing the raw record.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.RawRecord.Offset">
            <summary>
            Gets the offset in <see cref="P:Ookii.Jumbo.IO.RawRecord.Buffer"/> at which the record starts.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.RawRecord.Count">
            <summary>
            Gets the number of bytes in <see cref="P:Ookii.Jumbo.IO.RawRecord.Buffer"/> for the record.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawRecord.Reset(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Resets the this instance of the <see cref="T:Ookii.Jumbo.IO.RawRecord"/> class for a new record.
            </summary>
            <param name="buffer">The buffer containing the record.</param>
            <param name="offset">The offset in <paramref name="buffer"/> at which the record starts.</param>
            <param name="count">The number of bytes in <paramref name="buffer"/> for the record.</param>
            <remarks>
            <para>
              The value of <paramref name="buffer"/> will be stored in this instance and returned by the <see cref="P:Ookii.Jumbo.IO.RawRecord.Buffer"/> property.
              Any changes made to the contents of the buffer after calling <see cref="M:Ookii.Jumbo.IO.RawRecord.Reset(System.Byte[],System.Int32,System.Int32)"/> will be reflected in this instance.
            </para>
            <note>
              Calling the <see cref="M:Ookii.Jumbo.IO.RawRecord.Read(System.IO.BinaryReader)"/> method may overwrite the contents of the current buffer at offset zero, or allocate a new one if that buffer
              is not big enough.
            </note>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawRecord.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the object to the specified writer.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to serialize the object to.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RawRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads the object from the specified reader.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to deserialize the object from.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.ReaderRecordInput">
            <summary>
            An implementation of <see cref="T:Ookii.Jumbo.IO.RecordInput"/> that reads the input from an existing record reader.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.ReaderRecordInput.#ctor(Ookii.Jumbo.IO.IRecordReader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.ReaderRecordInput"/> class.
            </summary>
            <param name="reader">The record reader for this input.</param>
            <param name="isMemoryBased">If set to <see langword="true"/>, the input is memory based; if <see langword="false" />, the input is read from a file.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.ReaderRecordInput.IsMemoryBased">
            <summary>
            Gets a value indicating whether this input is read from memory.
            </summary>
            <value>
            	<see langword="true"/> if this input is read from memory; <see langword="false"/> if it is read from a file.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.ReaderRecordInput.IsRawReaderSupported">
            <summary>
            Gets a value indicating whether this instance supports the raw record reader.
            </summary>
            <value>
            	<see langword="true"/> if this instance supports the raw record reader; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.ReaderRecordInput.CreateReader">
            <summary>
            Creates the record reader for this input. This function is not used by the <see cref="T:Ookii.Jumbo.IO.ReaderRecordInput"/> class.
            </summary>
            <returns>
            The record reader for this input.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.ReaderRecordInput.CreateRawReader">
            <summary>
            Creates the raw record reader for this input. This function is not supported by the <see cref="T:Ookii.Jumbo.IO.ReaderRecordInput"/> class.
            </summary>
            <returns>
            The record reader for this input.
            </returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordFile">
            <summary>
            This class provides helper stuff for record files.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordFileHeader">
            <summary>
            Represents the header of a record file.
            </summary>
            <remarks>
            <para>
              A record file is a plain file containing a sequence of records, with an occasional record marker to make it possible to start reading
              at any point in the file and find the next record marker so you can start reading from the beginning of a record.
            </para>
            <para>
              Record markers are 16 bytes random values created with the cryptographic <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/>
              for maximum entropy.
            </para>
            <para>
              A record file begins with a header, which uses the following format:
            </para>
            <list type="table">
              <listheader>
                <term>Field</term>
                <description>Value</description>
              </listheader>
              <item>
                <term>Version</term>
                <description>Three bytes containing the ASCII string "REC", followed by a single byte containing the version number of the record file format.</description>
              </item>
              <item>
                <term>Record type name</term>
                <description>The assembly qualified name of the type of the records, as a utf-8 encoded string, preceded by the string length (this is the format used by <see cref="M:System.IO.BinaryWriter.Write(System.String)"/>.</description>
              </item>
              <item>
                <term>Record marker</term>
                <description>A 16-byte value specifying the record marker for this file.</description>
              </item>
            </list>
            <para>
              After the header, a sequence of records follows. Each record is preceded by a 4 byte record prefix which is an integer in little endian format.
              If this prefix is -1, it is followed by a record marker, and not a record. Otherwise the prefix is followed by a record, which will be read by
              the record types <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> implementation.
            </para>
            <para>
              In future versions, the record prefix may be used for other information (such as the record size), but currently it will always be either -1 to indicate
              a record marker, or 0 to indicate a record.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordFileHeader"/> class that will be initialized using <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/>.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileHeader.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordFileHeader"/> class using the latest version and specified record type.
            </summary>
            <param name="recordType">The type of the records.</param>
            <param name="useStrongName"><see langword="true"/> to use the strong name of the assembly (if it has one) in the header; <see langword="false"/>
            to use the simple name.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordFileHeader.Version">
            <summary>
            Gets the version number of the record file format.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordFileHeader.RecordTypeName">
            <summary>
            Gets or sets the name of the type of the records in the file.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordFileHeader.RecordType">
            <summary>
            Gets the type of the records in the file.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileHeader.GetRecordMarker">
            <summary>
            Gets the record marker for this record file.
            </summary>
            <returns>A copy of the record marker for the file.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordFileReader`1">
            <summary>
            A record reader that reads files in the record file format.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <remarks>
            <para>
              For more information about the format of record files, see <see cref="T:Ookii.Jumbo.IO.RecordFileHeader"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileReader`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordFileReader`1"/> class that reads from the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileReader`1.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordFileReader`1"/> class that reads the specified range of the specified stream,
            optionally reusing record instances.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="offset">The position in the stream to start reading.</param>
            <param name="size">The number of bytes to read from the stream.</param>
            <param name="allowRecordReuse"><see langword="true"/> if the record reader may re-use the same record instance for every
            record; <see langword="false"/> if it must create a new instance for every record.</param>
            <remarks>
            <para>
              The <see cref="T:Ookii.Jumbo.IO.RecordFileReader`1"/> will read a whole number of records until the start of the last record marker encountered is
              on or after <paramref name="offset"/> + <paramref name="size"/>.
            </para>
            <para>
              If <paramref name="offset"/> is greater than the header size, the <see cref="T:Ookii.Jumbo.IO.RecordFileReader`1"/> will seek forward from
              <paramref name="offset "/> until the first record marker found, and read records from there.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordFileReader`1.Header">
            <summary>
            Gets the header of that was read from the record file.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileReader`1.ReadRecordInternal">
            <summary>
            Reads a record.
            </summary>
            <returns><see langword="true"/> if an object was successfully read from the stream; <see langword="false"/> if the end of the stream or stream fragment was reached.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileReader`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.RecordFileReader`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordFileWriter`1">
            <summary>
            A record writer that writes files in the record file format.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <remarks>
            <para>
              For more information about the format of record files, see <see cref="T:Ookii.Jumbo.IO.RecordFileHeader"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileWriter`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordFileWriter`1"/> class that writes to the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write to.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordFileWriter`1.Header">
            <summary>
            Gets the header of that was read from the record file.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileWriter`1.WriteRecordInternal(`0)">
            <summary>
            Writes the specified record to the stream.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordFileWriter`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.RecordFileWriter`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordIndexEntry">
            <summary>
            Represents an index entry indicating the position of a record in an array of bytes.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordIndexEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordIndexEntry"/> struct.
            </summary>
            <param name="offset">The offset into the byte array.</param>
            <param name="count">The number of bytes for the record.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordIndexEntry.Offset">
            <summary>
            Gets the offset into the byte array.
            </summary>
            <value>
            The offset into the byte array.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordIndexEntry.Count">
            <summary>
            Gets the number of bytes for the record.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordIndexEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordIndexEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordIndexEntry.Equals(Ookii.Jumbo.IO.RecordIndexEntry)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><see langword="true"/> if the current object is equal to the other parameter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordIndexEntry.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordIndexEntry.op_Equality(Ookii.Jumbo.IO.RecordIndexEntry,Ookii.Jumbo.IO.RecordIndexEntry)">
            <summary>
            Determines whether two specified instances have the same value.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordIndexEntry.op_Inequality(Ookii.Jumbo.IO.RecordIndexEntry,Ookii.Jumbo.IO.RecordIndexEntry)">
            <summary>
            Determines whether two specified instances have different values.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is different from the value of <paramref name="right"/>; otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordInput">
            <summary>
            Represents an input to the <see cref="T:Ookii.Jumbo.IO.MultiInputRecordReader`1"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordInput"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordInput.#ctor(Ookii.Jumbo.IO.IRecordReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordInput"/> class.
            </summary>
            <param name="reader">The reader for this input.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordInput.IsMemoryBased">
            <summary>
            Gets a value indicating whether this input is read from memory.
            </summary>
            <value>
            	<see langword="true"/> if this input is read from memory; <see langword="false"/> if it is read from a file.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordInput.IsRawReaderSupported">
            <summary>
            Gets a value indicating whether this instance supports the raw record reader.
            </summary>
            <value>
            	<see langword="true"/> if this instance supports the raw record reader; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordInput.Reader">
            <summary>
            Gets the record reader for this input.
            </summary>
            <value>The record reader.</value>
            <remarks>
            <para>
              If the reader had not yet been created, it will be created by accessing this property.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordInput.HasRecords">
            <summary>
            Gets a value indicating whether this instance has records available.
            </summary>
            <value>
            	<see langword="true"/> if the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property is <see langword="true"/>; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              This property can be accessed without creating the record reader if it had not yet been created.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordInput.IsReaderCreated">
            <summary>
            Gets a value indicating whether the record reader has been created.
            </summary>
            <value>
            	<see langword="true"/> if the record reader has been created; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              If this value is <see langword="false"/>, it means that the <see cref="P:Ookii.Jumbo.IO.RecordInput.Reader"/> property will
              create a file-based record reader when accessed, which is guaranteed never to return <see langword="false"/>
              for the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordInput.IsRawReaderCreated">
            <summary>
            Gets a value indicating whether the record reader has been created.
            </summary>
            <value>
            	<see langword="true"/> if the raw record reader has been created; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              If this value is <see langword="false"/>, it means that the <see cref="M:Ookii.Jumbo.IO.RecordInput.GetRawReader"/> method will
              create a file-based record reader when accessed, which is guaranteed never to return <see langword="false"/>
              for the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordInput.Dispose">
            <summary>
            Releases all resources used by this RecordInput.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordInput.GetRawReader">
            <summary>
            Gets the raw record reader for this input.
            </summary>
            <returns>The raw record reader.</returns>
            <remarks>
            <para>
              If the reader had not yet been created, it will be created by this method.
            </para>
            <para>
              The raw reader requires that the records were written using a <see cref="T:Ookii.Jumbo.IO.BinaryRecordWriter`1"/> with <see cref="T:Ookii.Jumbo.IO.RawRecord"/>
              as the record type.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordInput.CreateReader">
            <summary>
            Creates the record reader for this input.
            </summary>
            <returns>
            The record reader for this input.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordInput.CreateRawReader">
            <summary>
            Creates the raw record reader for this input.
            </summary>
            <returns>
            The record reader for this input.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordInput.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordReader">
            <summary>
            Provides methods for inspecting record readers.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordReader.GetRecordType(System.Type)">
            <summary>
            Gets the type of the records for the specified record reader.
            </summary>
            <param name="recordReaderType">The type of the record reader.</param>
            <returns>The record type</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordReader`1">
            <summary>
            Abstract base class for record readers.
            </summary>
            <typeparam name="T">The type of the record</typeparam>
        </member>
        <member name="E:Ookii.Jumbo.IO.RecordReader`1.HasRecordsChanged">
            <summary>
            Occurs when the value of the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property changes.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordReader`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordReader`1"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordReader`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordReader`1"/> class.
            </summary>
            <param name="initialHasRecords">The initial value of the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordReader`1.SourceName">
            <summary>
            Gets or sets the an informational string indicating the source of the records.
            </summary>
            <remarks>
            This property is used for record readers passed to merge tasks in Jumbo Jet to indicate
            the task that this reader's data originates from.
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordReader`1.RecordsRead">
            <summary>
            Gets the number of records that has been read by this record reader.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordReader`1.Progress">
            <summary>
            Gets a number between 0 and 1 that indicates the progress of the reader.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordReader`1.InputBytes">
            <summary>
            Gets the size of the records before deserialization.
            </summary>
            <value>
            The size of the records before deserialization, or 0 if the records were not read from a serialized source.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordReader`1.BytesRead">
            <summary>
            Gets the actual number of bytes read from the input.
            </summary>
            <value>The number of bytes read from the input.</value>
            <remarks>
            This is the value of <see cref="P:Ookii.Jumbo.IO.RecordReader`1.InputBytes"/>, adjusted for compression (if applicable) and including any additional data read by the record reader (if any).
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordReader`1.CurrentRecord">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords">
            <summary>
            Gets a value that indicates whether there are records available on the data source that this reader is reading from.
            </summary>
            <value>
            	<see langword="true"/> if this instance has records available and is not waiting for input; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              The <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property indicates if the record reader is waiting for an external source to provide it
              with data, or has data available from which it can read records immediately. If this property
              is <see langword="true"/>, it indicates that the <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/> method will not
              block waiting for an external event (it may, however, still block waiting for IO).
            </para>
            <para>
              For example, a multi-input record reader may use the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property to indicate whether any inputs
              have been added yet. If this multi-input record reader is reading from a file channel, this could
              be used to determine if the reader is waiting for data to be shuffled or if it is available now.
            </para>
            <para>
              If the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property is <see langword="false"/>, it is still safe to call <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/>,
              there is just no guarantee that the call will return immediately.
            </para>
            <para>
              If the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property is <see langword="false"/> and <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasFinished"/> is <see langword="false"/>,
              then the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property must become <see langword="true"/> at some point, provided there are no error
              conditions.
            </para>
            <para>
              If the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property is <see langword="true"/>, the next call to <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/> can
              still return <see langword="false"/>. After <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/> has returned <see langword="false"/>, the
              <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property will also be <see langword="false"/>
            </para>
            <para>
              When the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property changes, the <see cref="E:Ookii.Jumbo.IO.RecordReader`1.HasRecordsChanged"/> event will be raised.
            </para>
            <para>
              For multi-input record readers, this property applies only to the current partition; if the current partition
              changes, the value of the <see cref="P:Ookii.Jumbo.IO.RecordReader`1.HasRecords"/> property should be reset.
            </para>
            <para>
              This is a default implementation for <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> that simply always returns <see langword="true"/> until
              a call to <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/> has returned <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordReader`1.HasFinished">
            <summary>
            Gets a value indicating whether this instance has read all records.
            </summary>
            <value>
            	<see langword="true"/> if this instance has finished; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordReader`1.ReadTime">
            <summary>
            Gets the time spent reading.
            </summary>
            <value>
            The time spent reading.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord">
            <summary>
            Reads a record.
            </summary>
            <returns><see langword="true"/> if an object was successfully read; <see langword="false"/> if there are no more records.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordReader`1.EnumerateRecords">
            <summary>
            Enumerates over all the records.
            </summary>
            <returns>An implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates over the records.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecordInternal">
            <summary>
            Reads a record.
            </summary>
            <returns><see langword="true"/> if an object was successfully read; <see langword="false"/> if there are no more records.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordReader`1.OnHasRecordsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Ookii.Jumbo.IO.RecordReader`1.HasRecordsChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordReader`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.RecordReader`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordReader`1.Dispose">
            <summary>
            Cleans up all resources held by this <see langword="StreamRecordReader{T}"/>.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordStreamOptions">
            <summary>
            Indicates how a record stream should treat records.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.IO.RecordStreamOptions.None">
            <summary>
            No special handlings of records is required.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.IO.RecordStreamOptions.DoNotCrossBoundary">
            <summary>
            Records should not cross boundaries (e.g. block boundaries on the DFS).
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordWriter">
            <summary>
            Provides methods for inspecting record writers.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordWriter.GetRecordType(System.Type)">
            <summary>
            Gets the type of the records for the specified record writer.
            </summary>
            <param name="recordWriterType">The type of the record writer.</param>
            <returns>The record type</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.RecordWriter`1">
            <summary>
            Abstract base class for classes that write records.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <remarks>
            <para>
              All records passed to <see cref="M:Ookii.Jumbo.IO.RecordWriter`1.WriteRecord(`0)"/> must be <typeparamref name="T"/>; they may not be a type derived
              from <typeparamref name="T"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordWriter`1.RecordsWritten">
            <summary>
            Gets the total number of records written by this record writer.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordWriter`1.OutputBytes">
            <summary>
            Gets the size of the written records after serialization.
            </summary>
            <value>
            The size of the written records after serialization, or 0 if this writer did not serialize the records.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordWriter`1.BytesWritten">
            <summary>
            Gets the number of bytes that were actually written to the output.
            </summary>
            <value>The number of bytes written to the output.</value>
            <remarks>
            This is the value of <see cref="P:Ookii.Jumbo.IO.RecordWriter`1.OutputBytes"/>, adjusted for compression (if applicable) and including any additional data written by the record writer (if any).
            If this property is not overridden, the value of <see cref="P:Ookii.Jumbo.IO.RecordWriter`1.OutputBytes"/> is returned.
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordWriter`1.HasFinishedWriting">
            <summary>
            Gets a value indicating whether <see cref="M:Ookii.Jumbo.IO.RecordWriter`1.FinishWriting"/> method has been called.
            </summary>
            <value>
            	<see langword="true"/> if this instance has finished writing; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.RecordWriter`1.WriteTime">
            <summary>
            Gets the time spent writing.
            </summary>
            <value>
            The time spent writing.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordWriter`1.WriteRecord(`0)">
            <summary>
            Writes a record.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordWriter`1.WriteRecords(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes the specified sequence of records.
            </summary>
            <param name="records">The records to write.</param>
            <remarks>
            <para>
              This is primarily a helper function so that you can easily write the result of a LINQ expression
              to a record writer.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordWriter`1.FinishWriting">
            <summary>
            Informs the record writer that no further records will be written.
            </summary>
            <remarks>
            <note>
              Overriders must call the base class implementation to ensure the <see cref="P:Ookii.Jumbo.IO.RecordWriter`1.HasFinishedWriting"/> property gets set.
            </note>
            <para>
              This method is intended for record writers that need to perform additional writing to finalize their output. In Jumbo Jet, this
              method will be called before the writer's metrics are collected so they can include these additional writes.
            </para>
            <para>
              It is allowed to dispose any output streams or other objects related to the output when this method is called, as no more
              writes will occur after that point. However, the <see cref="P:Ookii.Jumbo.IO.RecordWriter`1.RecordsWritten"/> <see cref="P:Ookii.Jumbo.IO.RecordWriter`1.BytesWritten"/> and <see cref="P:Ookii.Jumbo.IO.RecordWriter`1.OutputBytes"/>
              properties must still return the correct values after <see cref="M:Ookii.Jumbo.IO.RecordWriter`1.FinishWriting"/> has been called.
            </para>
            <para>
              The <see cref="M:System.IDisposable.Dispose"/> implementation for <see cref="T:Ookii.Jumbo.IO.RecordWriter`1"/> will call this method. It is recommended
              to make it safe to call this method multiple times.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordWriter`1.WriteRecordInternal(`0)">
            <summary>
            When implemented in a derived class, writes a record.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordWriter`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.RecordWriter`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RecordWriter`1.Dispose">
            <summary>
            Cleans up all resources held by this <see langword="RecordWriter{T}"/>.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.IO.RoundRobinMultiInputRecordReader`1">
            <summary>
            Multi input record reader that reads from all currently available inputs in a round robin fashion.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <remarks>
            <para>
              This class does not wait for all inputs to be available. Whatever inputs are available when <see cref="M:Ookii.Jumbo.IO.RecordReader`1.ReadRecord"/>
              is called will be used in the list. Inputs where <see cref="P:Ookii.Jumbo.IO.IRecordReader.HasRecords"/> is <see langword="false"/>
              will be skipped.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.RoundRobinMultiInputRecordReader`1.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean,System.Int32,Ookii.Jumbo.CompressionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.MultiRecordReader`1"/> class.
            </summary>
            <param name="partitions">The partitions that this multi input record reader will read.</param>
            <param name="totalInputCount">The total number of input readers that this record reader will have.</param>
            <param name="allowRecordReuse"><see langword="true"/> if the record reader may reuse record instances; otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size to use to read input files.</param>
            <param name="compressionType">The compression type to us to read input files.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.RoundRobinMultiInputRecordReader`1.ReadRecordInternal">
            <summary>
            Reads a record.
            </summary>
            <returns><see langword="true"/> if an object was successfully read from the stream; <see langword="false"/> if the end of the stream or stream fragment was reached.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.RoundRobinMultiInputRecordReader`1.OnCurrentPartitionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Ookii.Jumbo.IO.MultiInputRecordReader`1.CurrentPartitionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.StreamRecordInput">
            <summary>
            An implementation of <see cref="T:Ookii.Jumbo.IO.RecordInput"/> that reads the input from an existing stream.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordInput.#ctor(System.Type,System.IO.Stream,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.StreamRecordInput"/> class.
            </summary>
            <param name="recordReaderType">Type of the record reader. This must be a specialization of the <see cref="T:Ookii.Jumbo.IO.BinaryRecordReader`1"/> generic class.</param>
            <param name="stream">The stream.</param>
            <param name="isMemoryBased">if set to <see langword="true"/>, the input is read from memory and not from disk.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="inputContainsRecordSizes">if set to <see langword="true"/> the input data contains record size markers.</param>
            <param name="allowRecordReuse">if set to <see langword="true"/> [allow record reuse].</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordInput.IsMemoryBased">
            <summary>
            Gets a value indicating whether this input is read from memory.
            </summary>
            <value>
            	<see langword="true"/> if this input is read from memory; <see langword="false"/> if it is read from a file.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordInput.IsRawReaderSupported">
            <summary>
            Gets a value indicating whether this instance supports the raw record reader.
            </summary>
            <value>
            	<see langword="true"/> if this instance supports the raw record reader; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordInput.CreateReader">
            <summary>
            Creates the record reader for this input.
            </summary>
            <returns>
            The record reader for this input.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordInput.CreateRawReader">
            <summary>
            Creates the raw record reader for this input.
            </summary>
            <returns>
            The record reader for this input.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordInput.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.StreamRecordReader`1">
            <summary>
            Abstract base class for classes that read records from a stream or part of a stream.
            </summary>
            <typeparam name="T">The type of the records to read.</typeparam>
            <remarks>
            <para>
              Deriving classes should start reading at <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Offset"/>. If <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Offset"/> is not on a record boundary,
              they should seek ahead to the first record boundary and start from there.
            </para>
            <para>
              Deriving classes should use <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Offset"/> and <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Size"/> to determine when to stop returning records.
              If <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Offset"/> + <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Size"/> is not on a record boundary, they should continue reading until the
              next record boundary.
            </para>
            <para>
              If the stream implements <see cref="T:Ookii.Jumbo.IO.IRecordInputStream"/> with <see cref="F:Ookii.Jumbo.IO.RecordStreamOptions.DoNotCrossBoundary"/> set, 
              and <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Offset"/> + <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Size"/> is on a structural boundary,
              <see cref="P:Ookii.Jumbo.IO.IRecordInputStream.StopReadingAtPosition"/> will be set to <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Offset"/> + <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Size"/>. In
              this situation, <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> may return 0 before <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Size"/> bytes are read. A
              deriving class should check this and stop reading at that point.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordReader`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.StreamRecordReader`1"/> class with the specified stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordReader`1.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.StreamRecordReader`1"/> class with the specified stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="offset">The position in the stream to start reading.</param>
            <param name="size">The number of bytes to read from the stream.</param>
            <remarks>
            <para>
              The reader will read a whole number of records until the start of the next record falls
              after <paramref name="offset"/> + <paramref name="size"/>. Because of this, the reader can
              read more than <paramref name="size"/> bytes.
            </para>
            <para>
              If the stream implements <see cref="T:Ookii.Jumbo.IO.IRecordInputStream"/> with <see cref="F:Ookii.Jumbo.IO.RecordStreamOptions.DoNotCrossBoundary"/> set, 
              and <paramref name="offset"/> + <paramref name="size"/> is on a structural boundary,
              <see cref="P:Ookii.Jumbo.IO.IRecordInputStream.StopReadingAtPosition"/> will be set to <paramref name="offset"/> + <paramref name="size"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordReader`1.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.StreamRecordReader`1"/> class with the specified stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="offset">The position in the stream to start reading.</param>
            <param name="size">The number of bytes to read from the stream.</param>
            <param name="seekToOffset"><see langword="true"/> to seek the stream to <paramref name="offset"/>; <see langword="false"/> to leave the stream at the current position.</param>
            <remarks>
            <para>
              The reader will read a whole number of records until the start of the next record falls
              after <paramref name="offset"/> + <paramref name="size"/>. Because of this, the reader can
              read more than <paramref name="size"/> bytes.
            </para>
            <para>
              If the stream implements <see cref="T:Ookii.Jumbo.IO.IRecordInputStream"/> with <see cref="F:Ookii.Jumbo.IO.RecordStreamOptions.DoNotCrossBoundary"/> set, 
              and <paramref name="offset"/> + <paramref name="size"/> is on a structural boundary,
              <see cref="P:Ookii.Jumbo.IO.IRecordInputStream.StopReadingAtPosition"/> will be set to <paramref name="offset"/> + <paramref name="size"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordReader`1.Offset">
            <summary>
            Gets the position in the stream where reading began.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordReader`1.Size">
            <summary>
            Gets the total size to read from the stream.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordReader`1.Stream">
            <summary>
            Gets the underlying stream from which this record reader is reading.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordReader`1.RecordInputStream">
            <summary>
            Gets or sets the <see cref="T:Ookii.Jumbo.IO.IRecordInputStream"/> implementation of <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Stream"/>.
            </summary>
            <value><see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Stream"/> cast to <see cref="T:Ookii.Jumbo.IO.IRecordInputStream"/>, or <see langword="null"/> if it doesn't implement it.</value>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordReader`1.FirstRecordOffset">
            <summary>
            Gets or sets the offset of the first record.
            </summary>
            <value>The first record offset.</value>
            <remarks>
            <para>
              If a deriving record reader seeks to the start of the first record from the specified <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.Offset"/>,
              it can set this property once it has found it to correct the value returned by <see cref="P:Ookii.Jumbo.IO.StreamRecordReader`1.InputBytes"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordReader`1.InputBytes">
            <summary>
            Gets the size of the records before deserialization.
            </summary>
            <value>
            The number of bytes read from the stream.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordReader`1.BytesRead">
            <summary>
            Gets the size of the records before deserialization.
            </summary>
            <value>
            The size of the records before deserialization, or 0 if the records were not read from a serialized source.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordReader`1.Progress">
            <summary>
            Gets the progress of the reader.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordReader`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.StreamRecordReader`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordReader`1.CheckDisposed">
            <summary>
            Checks if the object is disposed, and if so throws a <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Ookii.Jumbo.IO.StreamRecordReader`1"/> was disposed.</exception>
        </member>
        <member name="T:Ookii.Jumbo.IO.StreamRecordWriter`1">
            <summary>
            Abstract base class for classes that write records to a stream.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordWriter`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.RecordWriter`1"/> class.
            </summary>
            <param name="stream">The stream to which to write the records.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordWriter`1.Stream">
            <summary>
            Gets the underlying stream to which this record reader is writing.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordWriter`1.OutputBytes">
            <summary>
            Gets the size of the written records after serialization.
            </summary>
            <value>
            The number of bytes written to the output stream.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.StreamRecordWriter`1.BytesWritten">
            <summary>
            Gets the number of bytes that were actually written to the output.
            </summary>
            <value>If compression was used, the number of bytes written to the output after compression; otherwise, the same value as <see cref="P:Ookii.Jumbo.IO.StreamRecordWriter`1.OutputBytes"/>.</value>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordWriter`1.WriteRecordInternal(`0)">
            <summary>
            Writes a record.
            </summary>
            <param name="record">The record to write.</param>
            <remarks>
            <para>
              Derived classes should call the base class implementation after they wrote the record to the stream.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.StreamRecordWriter`1.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources associated with this <see cref="T:Ookii.Jumbo.IO.StreamRecordReader`1"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to clean up both managed and unmanaged resources; <see langword="false"/>
            to clean up unmanaged resources only.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.TextRecordWriter`1">
            <summary>
            Writes records to a stream as plain text.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
        </member>
        <member name="M:Ookii.Jumbo.IO.TextRecordWriter`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.TextRecordWriter`1"/> class with the specified
            stream and a new line record separator.
            </summary>
            <param name="stream">The stream to write the records to.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.TextRecordWriter`1.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.TextRecordWriter`1"/> class with the specified
            stream and record separator.
            </summary>
            <param name="stream">The stream to write the records to.</param>
            <param name="recordSeparator">The character sequence to write between every record. May be <see langword="null"/> to
            use the default value of <see cref="P:System.Environment.NewLine"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.TextRecordWriter`1.WriteRecordInternal(`0)">
            <summary>
            Writes the specified record to the stream.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.Utf8String">
            <summary>
            A mutable string stored and serialized in utf-8 format.
            </summary>
            <remarks>
            <note>
              Instances of the <see cref="T:Ookii.Jumbo.IO.Utf8String"/> class will not compare in proper lexicographical order if the string contains multi-byte characters.
              All that is guaranteed is that the ordering is deterministic.
            </note>
            <para>
              Because this object is mutable you must take care when using it scenarios where immutability is expected, e.g. as a key
              in a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.Utf8String"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.Utf8String"/> class using the specified string.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to set the value to. May be <see langword="null"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.Utf8String"/> class using the specified utf-8 byte array.
            </summary>
            <param name="value">A byte array containing a utf-8 encoded string.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.Utf8String"/> class using the specified utf-8 byte array, index and count.
            </summary>
            <param name="value">A byte array containing a utf-8 encoded string.</param>
            <param name="index">The index in <paramref name="value"/> to start copying.</param>
            <param name="count">The number of bytes from <paramref name="value"/> to copy.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.#ctor(Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.Utf8String"/> class that is a copy of the specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/>.
            </summary>
            <param name="value">The <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to copy.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.Utf8String.ByteLength">
            <summary>
            Gets the number of bytes in the encoded string.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.Utf8String.Capacity">
            <summary>
            Gets or sets the maximum size, in bytes, of the string this instance can hold without resizing.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.Utf8String.CharLength">
            <summary>
            Gets the length of the string in characters.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Set(System.String)">
            <summary>
            Sets the value of this <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to the specified <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to set the value to. May be <see langword="null"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Set(System.Byte[])">
            <summary>
            Sets the value of this <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to the specified byte array.
            </summary>
            <param name="value">A byte array containing a utf-8 encoded string.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Set(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the value of this <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to the specified region of the specified byte array.
            </summary>
            <param name="value">A byte array containing a utf-8 encoded string.</param>
            <param name="index">The index in <paramref name="value"/> to start copying.</param>
            <param name="count">The number of bytes from <paramref name="value"/> to copy.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Set(Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Sets the value of this <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to the value of the specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/>.
            </summary>
            <param name="value">The <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to copy.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Append(Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Appends the specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to this instance..
            </summary>
            <param name="value">The <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to append.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Append(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends a byte array containing utf-8 encoded data to this string.
            </summary>
            <param name="value">A byte array containing the utf-8 encoded string to append.</param>
            <param name="index">The index in <paramref name="value"/> at which to start copying.</param>
            <param name="count">The number of bytes from <paramref name="value"/> to copy.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.ToString">
            <summary>
            Gets a string representation of the current <see cref="T:Ookii.Jumbo.IO.Utf8String"/>.
            </summary>
            <returns>A string representation of the current <see cref="T:Ookii.Jumbo.IO.Utf8String"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Write(System.IO.Stream)">
            <summary>
            Writes this <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <remarks>
              This writes the utf-8 byte data of the string to the stream. No other information (such as the string length) is written.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.GetBytes">
            <summary>
            Gets the bytes of the utf-8 encoded string.
            </summary>
            <returns>The utf-8 encoded string.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.GetHashCode">
            <summary>
            Gets a hash code for this <see cref="T:Ookii.Jumbo.IO.Utf8String"/>.
            </summary>
            <returns>A 32-bit hash code for this <see cref="T:Ookii.Jumbo.IO.Utf8String"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Equals(System.Object)">
            <summary>
            Tests this <see cref="T:Ookii.Jumbo.IO.Utf8String"/> for equality with the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test for equality.</param>
            <returns><see langword="true"/> if this instance is equal to <paramref name="obj"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.GetLength(System.Byte[],System.Int32)">
            <summary>
            Gets the length of a Utf8String stored in a byte array.
            </summary>
            <param name="buffer">The buffer containing the string.</param>
            <param name="index">The index at which the string starts.</param>
            <returns>The length of the entire Utf8String object, including the length header.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.op_Equality(Ookii.Jumbo.IO.Utf8String,Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Determines whether two specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/> objects have the same value.
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="left"/> is equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.op_Inequality(Ookii.Jumbo.IO.Utf8String,Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Determines whether two specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/> objects have different values.
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="left"/> is different from <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.op_LessThan(Ookii.Jumbo.IO.Utf8String,Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/> is less than another specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.op_LessThanOrEqual(Ookii.Jumbo.IO.Utf8String,Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/> is less than or equal to another specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.op_GreaterThan(Ookii.Jumbo.IO.Utf8String,Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/> is greater than another specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.op_GreaterThanOrEqual(Ookii.Jumbo.IO.Utf8String,Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/> is greater than or equal to another specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.IO.Utf8String"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Equals(Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Tests this <see cref="T:Ookii.Jumbo.IO.Utf8String"/> for equality with the specified <see cref="T:Ookii.Jumbo.IO.Utf8String"/>.
            </summary>
            <param name="other">The <see cref="T:Ookii.Jumbo.IO.Utf8String"/> to test for equality.</param>
            <returns><see langword="true"/> if this instance is equal to <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.CompareTo(Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that 
            indicates whether the current instance precedes, follows, or occurs in the same position in the 
            sort order as the other object. 
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that 
            indicates whether the current instance precedes, follows, or occurs in the same position in the 
            sort order as the other object. 
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Read(System.IO.BinaryReader)">
            <summary>
            Reads the object from the specified reader.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to deserialize the object from.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the object to the specified writer.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to serialize the object to.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8String.Clone">
            <summary>
            Creates a clone of the current <see cref="T:Ookii.Jumbo.IO.Utf8String"/>.
            </summary>
            <returns>A new <see cref="T:Ookii.Jumbo.IO.Utf8String"/> with the same value as the current instance.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.Utf8StringRawComparer">
            <summary>
            A raw comparer for <see cref="T:Ookii.Jumbo.IO.Utf8String"/> records.
            </summary>
            <note>
              Instances of the <see cref="T:Ookii.Jumbo.IO.Utf8String"/> class will not compare in proper lexicographical order if the string contains multi-byte characters.
              All that is guaranteed is that the ordering is deterministic.
            </note>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8StringRawComparer.Compare(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares the binary representation of two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="buffer1">The buffer containing the first object.</param>
            <param name="offset1">The offset into <paramref name="buffer1"/> where the first object starts.</param>
            <param name="count1">The number of bytes in <paramref name="buffer1"/> used by the first object.</param>
            <param name="buffer2">The buffer containing the second object.</param>
            <param name="offset2">The offset into <paramref name="buffer2"/> where the second object starts.</param>
            <param name="count2">The number of bytes in <paramref name="buffer2"/> used by the second object.</param>
            <returns>A signed integer that indicates the relative values of the first and second object.</returns>
            <remarks>
            <para>
              The values of <paramref name="count1"/> and <paramref name="count2"/> may be larger than the size of the record.
              The comparer should determine on its own the actual size of the record, in the same way the <see cref="T:Ookii.Jumbo.IO.IWritable"/>
              or <see cref="T:Ookii.Jumbo.IO.ValueWriter`1"/> for that record does, and use that for the comparison. You should however
              never read more bytes from the buffer than the specified count.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.Utf8StringRawComparer.Compare(Ookii.Jumbo.IO.Utf8String,Ookii.Jumbo.IO.Utf8String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of the first and second object.
            </returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.ValueWriter">
            <summary>
            Provides methods for determining the <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> for a type.
            </summary>
            <remarks>
            Normally, you should use the <see cref="T:Ookii.Jumbo.IO.ValueWriter`1"/> class to access value writers.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.ValueWriter.GetWriter(System.Type)">
            <summary>
            Gets the <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> implementation for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> implementation for the specified type, or <see langword="null"/> if the type implements <see cref="T:Ookii.Jumbo.IO.IWritable"/>.</returns>
            <exception cref="T:System.NotSupportedException">The type has no value writer and does not implement <see cref="T:Ookii.Jumbo.IO.IWritable"/>.</exception>
        </member>
        <member name="T:Ookii.Jumbo.IO.ValueWriter`1">
            <summary>
            Provides access to <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> implementations for various basic framework types and types that specify the <see cref="T:Ookii.Jumbo.IO.ValueWriterAttribute"/> attribute.
            </summary>
            <typeparam name="T">The type of the object whose <see cref="T:Ookii.Jumbo.IO.IWritable"/> or <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> implementation to use.</typeparam>
            <remarks>
            <para>
              If you attempt to access this class for a type <typeparamref name="T" /> that does not implement <see cref="T:Ookii.Jumbo.IO.IWritable"/> and that does not have a implementation of <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>,
              an <see cref="T:System.NotSupportedException"/> is thrown by the static type initializer of the <see cref="T:Ookii.Jumbo.IO.ValueWriter`1"/> class.
            </para>
            <para>
              Built-in value writers are provided for the following types: <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>,
              <see cref="T:System.UInt32"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.String"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Boolean"/>,
              <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, <see cref="T:System.Tuple`3"/>, <see cref="T:System.Tuple`4"/>, <see cref="T:System.Tuple`5"/>, <see cref="T:System.Tuple`6"/>,
              <see cref="T:System.Tuple`7"/> and <see cref="T:System.Tuple`8"/>.
            </para>
            <para>
              Although value writers support tuples, there may be negative performance implications from using them. All the .Net Framework tuple types are reference types, but they are
              read-only and therefore do not support record reuse. This means that for every record, a new tuple object must be created, as well as new instances of any of the
              tuple's items that are reference types, even in situations where record reuse is allowed.
            </para>
            <para>
              Instead of using tuples, it is recommended to create a custom class that implements <see cref="T:Ookii.Jumbo.IO.IWritable"/> for your records.
            </para>
            <para>
              The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> structure is not supported by the value writer. Please use the <see cref="T:Ookii.Jumbo.IO.Pair`2"/> class instead, which provides
              additional functionality for key/value pairs required by Jumbo.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.IO.ValueWriter`1.Writer">
            <summary>
            Gets the writer for the type, or <see langword="null"/> if it implements <see cref="T:Ookii.Jumbo.IO.IWritable"/>.
            </summary>
            <value>
            An implementation of <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>, or <see langword="null"/> if it implements <see cref="T:Ookii.Jumbo.IO.IWritable"/>.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.ValueWriter`1.WriteValue(`0,System.IO.BinaryWriter)">
            <summary>
            Writes the specified value using its <see cref="T:Ookii.Jumbo.IO.IWritable"/> implementation or its <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>.
            </summary>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to write the value to.</param>
            <remarks>
            <para>
              If the type of <paramref name="value"/> implements <see cref="T:Ookii.Jumbo.IO.IWritable"/>, it is used to write
              the value. If it does not, the <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> is used to write the value.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.ValueWriter`1.ReadValue(System.IO.BinaryReader)">
            <summary>
            Reads a value from the specified reader using the type's <see cref="T:Ookii.Jumbo.IO.IWritable"/> implementation or its <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>.
            </summary>
            <param name="reader">The reader to read the value from.</param>
            <returns>An object containing the value.</returns>
            <remarks>
            <para>
              If the type implements <see cref="T:Ookii.Jumbo.IO.IWritable"/>, a new instance is created and <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/>
              is used to read the value. If it does not, <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> is used to read the value.
            </para>
            <para>
              This method will always create a new instance, even if the type implements <see cref="T:Ookii.Jumbo.IO.IWritable"/>, so
              should not be used in scenarios where you wish to support record reuse.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.IO.ValueWriterAttribute">
            <summary>
            Specifies the <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/> to use to serialize a type.
            </summary>
            <remarks>
            <para>
              This is for use with value types or immutable reference types. For mutable reference types it's recommended
              that you implement <see cref="T:Ookii.Jumbo.IO.IWritable"/> instead.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.ValueWriterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.ValueWriterAttribute"/> class.
            </summary>
            <param name="valueWriterTypeName">The type name of the type implementing <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.ValueWriterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.ValueWriterAttribute"/> class.
            </summary>
            <param name="valueWriterTypeName">The type that implements <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.ValueWriterAttribute.ValueWriterTypeName">
            <summary>
            Gets the name of the type that implements <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>.
            </summary>
            <value>
            The name of a type that implements <see cref="T:Ookii.Jumbo.IO.IValueWriter`1"/>.
            </value>
        </member>
        <member name="T:Ookii.Jumbo.IO.Writable`1">
            <summary>
            Abstract base class for writable types that provides a default implementation
            of <see cref="T:Ookii.Jumbo.IO.IWritable"/> based on reflection and code generation.
            </summary>
            <typeparam name="T">The type of the writable type; this should be the type inheriting from <see cref="T:Ookii.Jumbo.IO.Writable`1"/>.</typeparam>
            <remarks>
            <para>
              The generated <see cref="T:Ookii.Jumbo.IO.IWritable"/> implementation will serialize all properties of the type. Because <see cref="T:Ookii.Jumbo.IO.IWritable"/> types
              may be created uninitialized (without calling the constructor), you must be sure it's safe to deserialize a type by simply setting
              all its properties, even if the constructor hasn't been run.
            </para>
            <para>
              Because the serializer and deserializer are generated from the type <typeparamref name="T"/>, it is not safe to derive other classes from
              that type unless you override the <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> and <see cref="M:Ookii.Jumbo.IO.IWritable.Write(System.IO.BinaryWriter)"/> implementations.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.Writable`1.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the object to the specified writer.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to serialize the object to.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.Writable`1.Read(System.IO.BinaryReader)">
            <summary>
            Reads the object from the specified reader.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to deserialize the object from.</param>
        </member>
        <member name="T:Ookii.Jumbo.IO.WritableCollection`1">
            <summary>
            A collection of <see cref="T:Ookii.Jumbo.IO.IWritable"/> items which itself also implements <see cref="T:Ookii.Jumbo.IO.IWritable"/>.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <remarks>
            <para>
              You cannot add <see langword="null"/> as an item in this collection.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/> class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/> class that 
            is empty and has the specified initial capacity. 
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/> class that 
            contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. 
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the range of elements in the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>. The value can be <see langword="null"/> for reference types.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item"/> within the entire <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.WritableCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>. 
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>. 
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>. 
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>. The value can be <see langword="null"/> for reference types.</param>
            <returns>
            	<see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from
            <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.WritableCollection`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>.
            </summary>
            <value>The number of elements actually contained in the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>.</value>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>. 
            </summary>
            <param name="item">The object to remove from the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>. The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is successfully removed; otherwise, <see langword="false"/>. 
            This method also returns <see langword="false"/> if <paramref name="item"/> was not found in the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Ookii.Jumbo.IO.WritableCollection`1"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the object to the specified writer.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to serialize the object to.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.Read(System.IO.BinaryReader)">
            <summary>
            Reads the object from the specified reader.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to deserialize the object from.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <remarks>
            The hash code is computed using all the elements in the sequence.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableCollection`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="T:Ookii.Jumbo.IO.WritableComparable`1">
            <summary>
            Abstract base class for classes implementing <see cref="T:Ookii.Jumbo.IO.IWritable"/> that encapsulate a simple existing comparable type.
            </summary>
            <typeparam name="T">The underlying type of the writable.</typeparam>
        </member>
        <member name="P:Ookii.Jumbo.IO.WritableComparable`1.Value">
            <summary>
            Gets or sets the underlying string value.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.WritableComparable`1.Comparer">
            <summary>
            Gets a comparer to use to compare the values.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.ToString">
            <summary>
            Returns a string representation of this <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/>.
            </summary>
            <returns>A string representation of this <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.op_Equality(Ookii.Jumbo.IO.WritableComparable{`0},Ookii.Jumbo.IO.WritableComparable{`0})">
            <summary>
            Compares two instances of <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/> for equality.
            </summary>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns><see langword="true"/> if the objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.op_Inequality(Ookii.Jumbo.IO.WritableComparable{`0},Ookii.Jumbo.IO.WritableComparable{`0})">
            <summary>
            Compares two instances of <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/> for inequality.
            </summary>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns><see langword="true"/> if the objects are not equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.op_LessThan(Ookii.Jumbo.IO.WritableComparable{`0},Ookii.Jumbo.IO.WritableComparable{`0})">
            <summary>
            Checks if the first operand sorts before the right operand.
            </summary>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns><see langword="true"/> if <paramref name="left"/> comes earlier in
            the sort order than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.op_LessThanOrEqual(Ookii.Jumbo.IO.WritableComparable{`0},Ookii.Jumbo.IO.WritableComparable{`0})">
            <summary>
            Checks if the first operand sorts before or equal to the right operand.
            </summary>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns><see langword="true"/> if <paramref name="left"/> comes earlier in
            the sort order than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.op_GreaterThan(Ookii.Jumbo.IO.WritableComparable{`0},Ookii.Jumbo.IO.WritableComparable{`0})">
            <summary>
            Checks if the first operand sorts after the right operand.
            </summary>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns><see langword="true"/> if <paramref name="left"/> comes later in
            the sort order than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.op_GreaterThanOrEqual(Ookii.Jumbo.IO.WritableComparable{`0},Ookii.Jumbo.IO.WritableComparable{`0})">
            <summary>
            Checks if the first operand sorts after or equal to the right operand.
            </summary>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns><see langword="true"/> if <paramref name="left"/> comes later in
            the sort order than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the object to the specified writer.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to serialize the object to.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.Read(System.IO.BinaryReader)">
            <summary>
            Reads the object from the specified reader.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to deserialize the object from.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.CompareTo(Ookii.Jumbo.IO.WritableComparable{`0})">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that 
            indicates whether the current instance precedes, follows, or occurs in the same position in the 
            sort order as the other object. 
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that 
            indicates whether the current instance precedes, follows, or occurs in the same position in the 
            sort order as the other object. 
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableComparable`1.Equals(Ookii.Jumbo.IO.WritableComparable{`0})">
            <summary>
            Determines whether the specified <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/> is equal to the current <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/>.
            </summary>
            <param name="other">The <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/> to compare with the current <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/> is equal to the current 
            <see cref="T:Ookii.Jumbo.IO.WritableComparable`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.WritableIgnoreAttribute">
            <summary>
            Indicates that a property on class inheriting from <see cref="T:Ookii.Jumbo.IO.Writable`1"/> should not be serialized.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.IO.WritableNotNullAttribute">
            <summary>
            Indicates a property on a class that inherits from <see cref="T:Ookii.Jumbo.IO.Writable`1"/> will not be <see langword="null"/>.
            </summary>
            <remarks>
            If this is set, the <see cref="M:Ookii.Jumbo.IO.IWritable.Write(System.IO.BinaryWriter)"/> method will throw an exception if the
            property is <see langword="null"/>. A boolean to indicate <see langword="null"/> values will not be written to the
            stream, and the <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> method will not check it.
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.IO.WritableUtility">
            <summary>
            Provides utility functions for creating reflection-based <see cref="T:Ookii.Jumbo.IO.IWritable"/> implementations for classes.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableUtility.CreateSerializer``1">
            <summary>
            Uses reflection to creates a function that serializes an object to a <see cref="T:System.IO.BinaryWriter"/>; this function
            can be used in a <see cref="M:Ookii.Jumbo.IO.IWritable.Write(System.IO.BinaryWriter)"/> method.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <returns>A <see cref="T:System.Action`2"/> delegate to a method that serializes the object.</returns>
            <remarks>
            <para>
              The serializer created by this method will serialize only the public properties of the type which have
              a public get and set method. If you need to serialize additional state, you should do that manually.
            </para>
            <para>
              The serializer supports properties that have a type supported by one of the overloads of the <see cref="M:System.IO.BinaryWriter.Write(System.String)"/>
              method, as well those who implement <see cref="T:Ookii.Jumbo.IO.IWritable"/> themselves. The serializer supports
              <see langword="null"/> values by writing a <see cref="T:System.Boolean"/> before each property that has a reference type
              that indicates whether it's <see langword="null"/> or not.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableUtility.CreateDeserializer``1">
            <summary>
            Uses reflection to create a function that deserializes an object from a <see cref="T:System.IO.BinaryReader"/>; this function
            can be used in the object's <see cref="M:Ookii.Jumbo.IO.IWritable.Read(System.IO.BinaryReader)"/> implementation.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>A <see cref="T:System.Action`2"/> delegate to a method that deserializes the object.</returns>
            <remarks>
            <para>
              The function returned should only be used to deserialize data created by a function returned by <see cref="M:Ookii.Jumbo.IO.WritableUtility.CreateSerializer``1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableUtility.Write7BitEncodedInt32(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes a 32-bit integer in a compressed format.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to write the value to.</param>
            <param name="value">The 32-bit integer to be written.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WritableUtility.Read7BitEncodedInt32(System.IO.BinaryReader)">
            <summary>
            Reads in a 32-bit integer in compressed format.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read the value from.</param>
            <returns>A 32-bit integer in compressed format. </returns>
        </member>
        <member name="T:Ookii.Jumbo.IO.WriteBufferedStream">
            <summary>
            Provides an extra layer of write buffering for a stream.
            </summary>
            <remarks>
            <para>
              This class is intended for use by the data servers when they send blocks to more efficiently
              pack the data into packets than what <see cref="T:System.Net.Sockets.NetworkStream"/> provides.
            </para>
            <para>
              Unfortunately, the <see cref="T:System.IO.BufferedStream"/> class did not provide the required
              behaviour on Mono (it would bypass the buffer on a large write) so that's why this class is necessary.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.IO.WriteBufferedStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.WriteBufferedStream"/> class with the specified
            buffer size.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="bufferSize">The size of the buffer, in bytes.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WriteBufferedStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.IO.WriteBufferedStream"/> class with the default buffer size of 64KB.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write to.</param>
        </member>
        <member name="P:Ookii.Jumbo.IO.WriteBufferedStream.CanRead">
            <summary>
            Gets a value that indicates whether the current stream supports reading.
            </summary>
            <value>
            Returns the value of <see cref="P:System.IO.Stream.CanRead"/> of the underlying stream.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.WriteBufferedStream.CanSeek">
            <summary>
            Gets a value that indicates whether the current stream supports seeking.
            </summary>
            <value>
            Returns the value of <see cref="P:System.IO.Stream.CanSeek"/> of the underlying stream.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.WriteBufferedStream.CanWrite">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
            <value>
            Returns <see langword="true"/>.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.WriteBufferedStream.Flush">
            <summary>
            Flushes the contents of the write buffer to the underlying stream.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.IO.WriteBufferedStream.Length">
            <summary>
            Gets the length of the stream.
            </summary>
            <value>
            The length of the underlying stream.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.IO.WriteBufferedStream.Position">
            <summary>
            Gets or sets the current stream position.
            </summary>
            <value>
            The current stream position.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.IO.WriteBufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. 
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WriteBufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Ookii.Jumbo.IO.WriteBufferedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. 
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WriteBufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Ookii.Jumbo.IO.WriteBufferedStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Ookii.Jumbo.IO.WriteBufferedStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>This function flushes the stream.</remarks>
        </member>
        <member name="T:Ookii.Jumbo.JumboConfiguration">
            <summary>
            Provides configuration that may be shared between the Dfs and Jumbo Jet.
            </summary>
            <remarks>
            <para>
              Jumbo's shared configuration is specified in the file <c>common.config</c>.
            </para>
            </remarks>
            <seealso href="CommonConfiguration.html">common.config XML documentation</seealso>
        </member>
        <member name="P:Ookii.Jumbo.JumboConfiguration.NetworkTopology">
            <summary>
            Gets the configuration element for the network topology support.
            </summary>
            <value>
            The configuration element for the network topology support.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.JumboConfiguration.PatternTopologyResolver">
            <summary>
            Gets the configuration element that configures topology support using the <see cref="T:Ookii.Jumbo.Topology.PatternTopologyResolver" /> class.
            </summary>
            <value>
            The configuration element that configures topology support using the <see cref="T:Ookii.Jumbo.Topology.PatternTopologyResolver" /> class.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.JumboConfiguration.Log">
            <summary>
            Gets the configuration element that controls global logging settings.
            </summary>
            <value>The configuration element that controls global logging settings.</value>
        </member>
        <member name="M:Ookii.Jumbo.JumboConfiguration.GetConfiguration">
            <summary>
            Loads the Jumbo configuration from the application configuration file.
            </summary>
            <returns>A <see cref="T:Ookii.Jumbo.JumboConfiguration"/> object representing the settings in the application configuration file, or
            a default instance if the section was not present in the configuration file.</returns>
        </member>
        <member name="T:Ookii.Jumbo.ListExtensions">
            <summary>
            Provides extension methods for various list types.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.ListExtensions.Randomize``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomizes the specified list.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to randomize.</param>
        </member>
        <member name="M:Ookii.Jumbo.ListExtensions.Randomize``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Randomizes the specified list.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to randomize.</param>
            <param name="random">The randomizer to use.</param>
        </member>
        <member name="M:Ookii.Jumbo.ListExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates a string with the items of a list separated by the specified delimiter.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">A list.</param>
            <param name="delimiter">The delimiter to use.</param>
            <returns>A string containing the delimited list.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ListExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a string with the items of a list separated by a comma.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">A list.</param>
            <returns>A string containing the delimited list.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ListExtensions.GetSequenceHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the hash code for the specified sequence of elements.
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
            <param name="list">A list.</param>
            <returns>A hash code for the entire sequence.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the specified list.
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
            <param name="list">The list.</param>
            <param name="index1">The first index.</param>
            <param name="index2">The second index.</param>
        </member>
        <member name="M:Ookii.Jumbo.ListExtensions.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the element of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="ascending"><see langword="true"/> to sort in ascending order; <see langword="false"/> to sort in descending order.</param>
            <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="T:Ookii.Jumbo.LittleEndianBitConverter">
            <summary>
            Provides methods to read primitive types from an array of bytes in a system independent format.
            </summary>
            <remarks>
            <para>
              This class can be used to aid in implementing raw comparers for your record types.
            </para>
            <para>
                Unlike the <see cref="T:System.BitConverter"/> class, this class always uses little endian formatting. It can be used to read data written by the <see cref="T:System.IO.BinaryWriter"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Reads a 16-bit signed integer from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Reads a 16-bit unsigned integer from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a 32-bit signed integer from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a 32-bit unsigned integer from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a 64-bit signed integer from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a 64-bit unsigned integer from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Reads a single-precision floating point number from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A single-precision floating point number formed by four bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Reads a double-precision floating point number from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A double-precision floating point number formed by four bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Reads a decimal value from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A decimal value formed by sixteen bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToDateTime(System.Byte[],System.Int32)">
            <summary>
            Reads a date and time from the specified position in a byte array.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>.</param>
            <returns>A date and time formed by twelve bytes beginning at <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LittleEndianBitConverter.ToInt32From7BitEncoding(System.Byte[],System.Int32@)">
            <summary>
            Reads in a 32-bit integer in compressed format.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer"/>. On return, contains the offset after the value.</param>
            <returns>A 32-bit integer in compressed format, using between one and five bytes. </returns>
        </member>
        <member name="T:Ookii.Jumbo.LogConfigurationElement">
            <summary>
            Provides global logging configuration.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.LogConfigurationElement.Directory">
            <summary>
            Gets or sets the directory where log files are stored.
            </summary>
            <value>The directory where log files are stored. This value should end in a directory separator character.</value>
            <remarks>
            <para>
              If using the run-dfs.sh and run-jet.sh scripts on Unix, the JUMBO_LOG value in jumbo-config.sh should be set to the same value.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.LogConfigurationElement.ConfigureLogger">
            <summary>
            Initializes the logger based on the configuration.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.LogFileHelper">
            <summary>
            Provides methods for reading the log file. For Jumbo internal use only.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.LogFileHelper.GetLogFileStream(System.String,Ookii.Jumbo.LogFileKind,System.Int32)">
            <summary>
            Gets the specified log file stream. For Jumbo internal use only.
            </summary>
            <param name="serverName">Name of the server whose log file to return..</param>
            <param name="kind">The kind of log file.</param>
            <param name="maxSize">The maximum size, or zero to return the entire log file..</param>
            <returns>A <see cref="T:System.IO.Stream"/> for the log file whose position is set so that no more than <paramref name="maxSize"/> bytes will be read if you read until the end,
            or <see langword="null"/> if the log file doesn't exist.</returns>
        </member>
        <member name="M:Ookii.Jumbo.LogFileHelper.GetLogFileContents(System.String,Ookii.Jumbo.LogFileKind,System.Int32)">
            <summary>
            Gets the contents of the specified log file. For Jumbo internal use only.
            </summary>
            <param name="serverName">Name of the server whose log file to return.</param>
            <param name="kind">The kind of log file.</param>
            <param name="maxSize">The maximum size, or zero to return the entire log file..</param>
            <returns>The contents of the log file, or <see langword="null"/> if the log file doesn't exist.</returns>
        </member>
        <member name="T:Ookii.Jumbo.LogFileKind">
            <summary>
            The type of log file of a process.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.LogFileKind.Log">
            <summary>
            The log file created by log4net.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.LogFileKind.StdOut">
            <summary>
            The standard output.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.LogFileKind.StdErr">
            <summary>
            The standard error.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.MemoryStatus">
            <summary>
            Represents a snapshot of the system's memory status.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.MemoryStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.MemoryStatus"/> class.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.MemoryStatus.TotalPhysicalMemory">
            <summary>
            Gets the total size of the physical memory.
            </summary>
            <value>
            The total physical memory, in bytes.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.MemoryStatus.AvailablePhysicalMemory">
            <summary>
            Gets the amount of available physical memory.
            </summary>
            <value>
            The available physical memory, in bytes.
            </value>
            <remarks>
            This is not the same as free physical memory. Cached memory is considered available.
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.MemoryStatus.CachedMemory">
            <summary>
            Gets the amount of memory that is used as cache. This value is not available on Windows.
            </summary>
            <value>
            The amount of memory that is used as cache, in bytes.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.MemoryStatus.BufferedMemory">
            <summary>
            Gets the amount of memory that is used as buffers. This value is not available on Windows.
            </summary>
            <value>
            The amount of memory that is used as buffers, in bytes.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.MemoryStatus.TotalSwap">
            <summary>
            Gets the total size of the swap space.
            </summary>
            <value>
            The total size of the swap space, bytes.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.MemoryStatus.AvailableSwap">
            <summary>
            Gets the amount of swap space available.
            </summary>
            <value>
            The available swap space, in bytes.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.MemoryStatus.Refresh">
            <summary>
            Refreshes the memory snapshot.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.MemoryStatus.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:Ookii.Jumbo.MemoryStatus"/>.
            </summary>
            <returns>A string representation of the current <see cref="T:Ookii.Jumbo.MemoryStatus"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.MemoryStatus.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Ookii.Jumbo.MemoryStatus"/> class.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.PriorityQueue`1">
            <summary>
            Provides a queue where the element with the lowest value is always at the front of the queue.
            </summary>
            <typeparam name="T">The type of elements in the priority queue.</typeparam>
            <remarks>
            <para>
              The items must be immutable as long as they are in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>. The only exception is the first
              item, which you may modify if you call <see cref="M:Ookii.Jumbo.PriorityQueue`1.AdjustFirstItem"/> immediately afterward.
            </para>
            </remarks>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> class that is empty, 
            has the default initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation for the element type.
            </summary>
            <remarks>
            <para>
              <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> requires a comparer implementation to perform key
              comparisons. This constructor uses the default generic equality comparer, 
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/>. If type <typeparamref name="T"/>
              implements the <see cref="T:System.IComparable`1"/> generic interface, the default comparer
              uses that implementation. Alternatively, you can specify an implementation of the
              <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface by using a constructor that accepts a
              <em>comparer</em> parameter.
            </para>
            <para>
              This constructor is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> that contains elements
            copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> and that uses the specified 
            <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to compare keys.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to 
            the new <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when 
            comparing elements, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.Comparer`1"/>
            for the type of element.</param>
            <remarks>
            <para>
              <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> requires a comparer implementation to perform key
              comparisons. If comparer is <see langword="null"/>, this constructor uses the default
              generic equality comparer, <see cref="P:System.Collections.Generic.Comparer`1.Default"/>. If type <typeparamref name="T"/>
              implements the <see cref="T:System.IComparable`1"/> generic interface, the default comparer
              uses that implementation.
            </para>
            <para>
              This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements
              in <paramref name="collection"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and uses the default <see cref="T:System.Collections.Generic.IComparer`1"/> implementation for the element type.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied into the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.</param>
            <remarks>
            <para>
              <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> requires a comparer implementation to perform key
              comparisons. This constructor uses the default generic equality comparer, 
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/>. If type <typeparamref name="T"/>
              implements the <see cref="T:System.IComparable`1"/> generic interface, the default comparer
              uses that implementation. Alternatively, you can specify an implementation of the
              <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface by using a constructor that accepts a
              <em>comparer</em> parameter.
            </para>
            <para>
              This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements
              in <paramref name="collection"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> class that is empty, 
            has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation to compare elements.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when 
            comparing elements, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.Comparer`1"/>
            for the type of element.</param>
            <remarks>
            <para>
              <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> requires a comparer implementation to perform key
              comparisons. If comparer is <see langword="null"/>, this constructor uses the default
              generic equality comparer, <see cref="P:System.Collections.Generic.Comparer`1.Default"/>. If type <typeparamref name="T"/>
              implements the <see cref="T:System.IComparable`1"/> generic interface, the default comparer
              uses that implementation.
            </para>
            <para>
              This constructor is an O(<em>n</em>) operation, where <em>n</em> is <paramref name="capacity"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> class that is empty, has the default initial capacity, and uses the
            specified <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to compare elements.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when 
            comparing elements, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.Comparer`1"/>
            for the type of element.</param>
            <remarks>
            <para>
              <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> requires a comparer implementation to perform key
              comparisons. If comparer is <see langword="null"/>, this constructor uses the default
              generic equality comparer, <see cref="P:System.Collections.Generic.Comparer`1.Default"/>. If type <typeparamref name="T"/>
              implements the <see cref="T:System.IComparable`1"/> generic interface, the default comparer
              uses that implementation.
            </para>
            <para>
              This constructor is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.PriorityQueue`1.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> that is used to compare the elements of the
            priority queue.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface implementation that is used to compare the elements of the
            priority queue.
            </value>
            <remarks>
            <para>
              Getting the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.PriorityQueue`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <value>
            The number of elements that the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> can contain before resizing is required.
            </value>
            <remarks>
            <para>
              <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> is the number of elements that the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> can store before 
              resizing is required, while <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/> is the number of elements that are actually in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            </para>
            <para>
              <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> is always greater than or equal to <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>. If <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/> exceeds
              <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> while adding elements, the capacity is increased by automatically reallocating the
              internal array before copying the old elements and adding the new elements. 
            </para>
            <para>
              The capacity can be decreased by setting the <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> property explicitly. When the value of
              <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> is set explicitly, the internal array is also reallocated to accommodate the
              specified capacity, and all the elements are copied. 
            </para>
            <para>
              Retrieving the value of this property is an O(1) operation; setting the property is an O(<em>n</em>) operation, where <em>n</em> is the new capacity. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> is set to a value that is less than count.</exception>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            </summary>
            <param name="item">The object to add to the queue. The value can be <see langword="null"/> for reference types.</param>
            <remarks>
            <para>
              <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> accepts <see langword="null"/> as a valid value for reference types and allows duplicate elements.
            </para>
            <para>
              The new element's position is determined by the <see cref="T:System.IComparable`1"/> implementation used to compare elements.
              If the new element is smaller than the current first element in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>, the new element
              will become the first element in the queue. Otherwise, the existing first element will remain the first element.
            </para>
            <para>
              If <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/> already equals <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/>, the capacity of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> is
              increased by automatically reallocating the internal array, and the existing elements are copied to the new array
              before the new element is added. 
            </para>
            <para>
              If <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/> is less than <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/>, this method is an O(log <em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
              If the capacity needs to be increased to accommodate the new element, this method becomes an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.Dequeue">
            <summary>
            Removes and return the element with the lowest value from the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            </summary>
            <returns>The object with the lowest value that was removed from the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.</returns>
            <remarks>
            <para>
              This method is similar to the <see cref="M:Ookii.Jumbo.PriorityQueue`1.Peek"/> method, but <see cref="M:Ookii.Jumbo.PriorityQueue`1.Peek"/> does not modify the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>. 
            </para>
            <para>
              If type <typeparamref name="T"/> is a reference type, <see langword="null"/> can be added to the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> as a value. 
            </para>
            <para>
              This method is an O(log <em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.Peek">
            <summary>
            Return the object with the lowest value in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> without removing it.
            </summary>
            <returns>The object with the lowest value in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.</returns>
            <remarks>
            <para>
              This method is similar to the <see cref="M:Ookii.Jumbo.PriorityQueue`1.Dequeue"/> method, but <see cref="M:Ookii.Jumbo.PriorityQueue`1.Peek"/> does not modify the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>. 
            </para>
            <para>
              If type <typeparamref name="T"/> is a reference type, <see langword="null"/> can be added to the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> as a value. 
            </para>
            <para>
              This method is an O(1) operation.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.AdjustFirstItem">
            <summary>
            Indicates that the current first item of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> was modified and its priority has to be re-evaluated.
            </summary>
            <remarks>
            <para>
              If <typeparamref name="T"/> is a reference type and not immutable, it may be possible to modify the value of
              items in the queue. In general, this is not allowed and doing this will break the priority queue and lead to
              undefined behaviour.
            </para>
            <para>
              However, it is allowed to modify the current first element in the queue (which is returned by <see cref="M:Ookii.Jumbo.PriorityQueue`1.Peek"/>)
              if this change is followed by an immediate call to <see cref="M:Ookii.Jumbo.PriorityQueue`1.AdjustFirstItem"/> which re-evaluates
              the item's value and moves a different item to the front if necessary.
            </para>
            <para>
              In the scenario that you are removing an item from the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> and immediately replacing it with a new one,
              using this function can yield better performance, as the sequence of <see cref="M:Ookii.Jumbo.PriorityQueue`1.Dequeue"/>, modify, <see cref="M:Ookii.Jumbo.PriorityQueue`1.Enqueue(`0)"/> is twice as slow
              as doing <see cref="M:Ookii.Jumbo.PriorityQueue`1.Peek"/>, modify, <see cref="M:Ookii.Jumbo.PriorityQueue`1.AdjustFirstItem"/>.
            </para>
            <para>
              Because the first element may change after calling <see cref="M:Ookii.Jumbo.PriorityQueue`1.AdjustFirstItem"/>, it is not safe to continue
              modifying that same element afterwards. You must call <see cref="M:Ookii.Jumbo.PriorityQueue`1.Peek"/> again to get the new front element which
              may now be changed.
            </para>
            <para>
              This method is an O(log <em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            </summary>
            <remarks>
            <para>
              <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/> is set to zero, and references to other objects from elements of the collection are also released.
            </para>
            <para>
              The capacity remains unchanged. To reset the capacity of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>, call <see cref="M:Ookii.Jumbo.PriorityQueue`1.TrimExcess"/>.
              Trimming an empty <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> sets the capacity of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> to the default capacity.
            </para>
            <para>
              This method is an O(<em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>, if that number is less than a threshold value.
            </summary>
            <remarks>
            <para>
              This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.
              The cost of reallocating and copying a large <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> can be considerable, however, so the <see cref="M:Ookii.Jumbo.PriorityQueue`1.TrimExcess"/> method
              does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for
              a relatively small gain.
            </para>
            <note>
              The current threshold of 90 percent it depends on <see cref="T:System.Collections.Generic.List`1"/> and might change in future releases of the .Net Framework. 
            </note>
            <para>
              This method is an O(<em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
            </para>
            <para>
              To reset a <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> to its initial state, call the <see cref="M:Ookii.Jumbo.PriorityQueue`1.Clear"/> method before calling the <see cref="M:Ookii.Jumbo.PriorityQueue`1.TrimExcess"/> method.
              Trimming an empty <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> sets the capacity of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> to the default capacity. 
            </para>
            <para>
              The capacity can also be set using the <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>. The value can be <see langword="null"/> for reference types. </param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>
              This method determines equality using the default equality comparer <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for <typeparamref name="T"/>, the type of values in the priority queue.
            </para>
            <para>
              This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.Remove(`0)">
            <summary>
            Removes the specified item from the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            </summary>
            <param name="item">The item.</param>
            <returns><see langword="true"/> if the item was removed; <see langword="false"/> if it was not found.</returns>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.CheckHeap">
            <summary>
            Checks the heap. Used for debug purposes.
            </summary>
            <returns><see langword="true"/> if the heap is valid; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.ToArray">
            <summary>
            Copies the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> elements to a new array. 
            </summary>
            <returns>A new array containing elements copied from the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.</returns>
            <remarks>
            <note>
              The order in which the elements are copied to the array is not guaranteed. The element with the lowest value
              will be the first element, but otherwise the elements will be in no particular order.
            </note>
            <para>
              The <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> is not modified. 
            </para>
            <para>
              This method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> elements to an existing one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <remarks>
            <note>
              The elements are copied to the <see cref="T:System.Array"/> in the same order in which the enumerator iterates through the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            </note>
            <para>
              This method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>, or the
            number of elements in the source <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> is greater than the available space from <paramref name="arrayIndex"/> to
            the end of the destination array. 
            </exception>
        </member>
        <member name="M:Ookii.Jumbo.PriorityQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the values in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            </summary>
            <returns>An enumerator that iterates through the values in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.</returns>
            <remarks>
            <para>
              The elements of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> will be enumerated in the same order as if you
              had called <see cref="M:Ookii.Jumbo.PriorityQueue`1.Dequeue"/> until the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> was empty. I.e. the
              elements are enumerated from lowest to highest value, in sorted order.
            </para>
            <para>
              The contents of the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> are not modified by enumerating.
            </para>
            <para>
              This method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.PriorityQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>. 
            </summary>
            <value>
            The number of elements contained in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>. 
            </value>
            <remarks>
            <para>
              <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> is the number of elements that the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/> can store before 
              resizing is required, while <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/> is the number of elements that are actually in the <see cref="T:Ookii.Jumbo.PriorityQueue`1"/>.
            </para>
            <para>
              <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> is always greater than or equal to <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/>. If <see cref="P:Ookii.Jumbo.PriorityQueue`1.Count"/> exceeds
              <see cref="P:Ookii.Jumbo.PriorityQueue`1.Capacity"/> while adding elements, the capacity is increased by automatically reallocating the
              internal array before copying the old elements and adding the new elements. 
            </para>
            <para>
              Retrieving the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.Jumbo.ProcessorStatus">
            <summary>
            Provides processor usage statistics for all processors in the system.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.ProcessorStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.ProcessorStatus"/> class.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.ProcessorStatus.Processors">
            <summary>
            Gets the usage data for each individual processor in the system.
            </summary>
            <value>
            A collection of <see cref="T:Ookii.Jumbo.IndividualProcessorStatus"/> object for each processor.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.ProcessorStatus.Total">
            <summary>
            Gets the combined usage data for all processors in the system.
            </summary>
            <value>
            A <see cref="T:Ookii.Jumbo.IndividualProcessorStatus"/> object that contains the combined usage data of all processors.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.ProcessorStatus.Refresh">
            <summary>
            Refreshes the usage data.
            </summary>
            <remarks>
            Usage percentages are calculated between two calls of the <see cref="M:Ookii.Jumbo.ProcessorStatus.Refresh"/> method. You need to call the <see cref="M:Ookii.Jumbo.ProcessorStatus.Refresh"/> method
            at least once to get data.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.ProcessorStatus.Dispose">
            <summary>
            Releases all resources associated with the <see cref="T:Ookii.Jumbo.ProcessorStatus"/> class.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.ArgumentConversionErrorFormat">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; provided for argument &apos;{1}&apos; could not be interpreted as a {2}..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.ArrayNotLastArgument">
            <summary>
              Looks up a localized string similar to Only the last positional argument may be an array..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.DefaultArgumentDescriptionFormat">
            <summary>
              Looks up a localized string similar to {0,13} : {1}.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.DefaultArraySuffix">
            <summary>
              Looks up a localized string similar to ....
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.DefaultOptionalArgumentFormat">
            <summary>
              Looks up a localized string similar to [{0}].
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.DefaultOptionalArgumentWithDefaultValueFormat">
            <summary>
              Looks up a localized string similar to [{0}={1}].
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.DefaultRequiredArgumentFormat">
            <summary>
              Looks up a localized string similar to &lt;{0}&gt;.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.DefaultUsagePrefixFormat">
            <summary>
              Looks up a localized string similar to Usage: {0}.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.EmptyArgumentName">
            <summary>
              Looks up a localized string similar to The argument name cannot be empty..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.EmptyNamedArgumentSwitch">
            <summary>
              Looks up a localized string similar to NamedArgumentSwitch may not be empty..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.IncorrectDefaultValueTypeFormat">
            <summary>
              Looks up a localized string similar to Default value does not have the same type as the argument for argument {0}..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.IndentOutOfRange">
            <summary>
              Looks up a localized string similar to The indent must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.InvalidArrayRank">
            <summary>
              Looks up a localized string similar to Multi-dimensional arrays are not supported for command line arguments..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.InvalidOptionalArgumentOrder">
            <summary>
              Looks up a localized string similar to Command line constructor cannot have non-optional arguments after an optional argument..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.MaxLineLengthOutOfRange">
            <summary>
              Looks up a localized string similar to The maximum line length must be larger than zero..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.MaxLineLengthSmallerThanIndent">
            <summary>
              Looks up a localized string similar to The indent must be smaller than the maximum line length..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.MissingArgumentValueFormat">
            <summary>
              Looks up a localized string similar to Argument {0} has no value..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.MissingNamedArgumentAttribute">
            <summary>
              Looks up a localized string similar to Specified property is not a named argument..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.MultipleMarkedConstructors">
            <summary>
              Looks up a localized string similar to The command line arguments type has more than one constructor with the CommandLineConstructorAttribute attribute..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.NamedArgumentContainsSeparatorFormat">
            <summary>
              Looks up a localized string similar to Named argument &apos;{0}&apos; cannot contain a colon (:)..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.NamedArgumentSwitchContainsSeparator">
            <summary>
              Looks up a localized string similar to NamedArgumentSwitch may not contain a colon (&apos;:&apos;)..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.NoArgumentsFormat">
            <summary>
              Looks up a localized string similar to The type {0} specifies no named or positional command line arguments..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.NoConstructor">
            <summary>
              Looks up a localized string similar to Command line arguments type does not have any public constructors..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.NoMarkedConstructor">
            <summary>
              Looks up a localized string similar to The command line arguments type has more than one constructor, none of which has the CommandLineConstructorAttribute attribute..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.NoTypeConverterFormat">
            <summary>
              Looks up a localized string similar to Argument {0} has type {1} that cannot be parsed from a string..
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Properties.Resources.UnknownArgumentFormat">
            <summary>
              Looks up a localized string similar to Unknown argument {0}..
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.Rpc.RpcException">
            <summary>
            Indicates an error occurred with a remoting operation.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Rpc.RpcException"/> class. 
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Rpc.RpcException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Rpc.RpcException"/> class with a specified error message and a reference to the inner <see cref="T:Ookii.Jumbo.Rpc.RpcException"/> that is the cause of this <see cref="T:Ookii.Jumbo.Rpc.RpcException"/>. 
            </summary>
            <param name="message">The error message that explains the reason for the <see cref="T:Ookii.Jumbo.Rpc.RpcException"/>.</param>
            <param name="inner">The <see cref="T:Ookii.Jumbo.Rpc.RpcException"/> that is the cause of the current <see cref="T:Ookii.Jumbo.Rpc.RpcException"/>, or a <see langword="null"/> if no inner <see cref="T:Ookii.Jumbo.Rpc.RpcException"/> is specified.</param>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Rpc.RpcException"/> class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the <see cref="T:Ookii.Jumbo.Rpc.RpcException"/> being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ookii.Jumbo.Rpc.RpcHelper">
            <summary>
            Provides functionality for registering remoting channels and services.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcHelper.RegisterServerChannels(System.Int32,System.Boolean)">
            <summary>
            Registers the server channels.
            </summary>
            <param name="port">The port on which to listen.</param>
            <param name="listen4And6">When IPv6 is available, <see langword="true"/> to listen on IPv4 as well as 
            IPv6; <see langword="false"/> to listen on IPv6 only. When IPv6 is not available, this parameter has no effect.</param>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcHelper.UnregisterServerChannels(System.Int32)">
            <summary>
            Unregisters the server channels.
            </summary>
            <param name="port">The port on which the server channels were registered.</param>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcHelper.RegisterService(System.String,System.Object)">
            <summary>
            Registers an object as a well-known service.
            </summary>
            <param name="objectName">The object name of the service.</param>
            <param name="server">The object implementing the service.</param>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcHelper.CreateClient``1(System.String,System.Int32,System.String)">
            <summary>
            Creates a client for the specified RPC service.
            </summary>
            <typeparam name="T">The type of the RPC interface.</typeparam>
            <param name="hostName">The host name of the RPC server.</param>
            <param name="port">The port of the RPC server.</param>
            <param name="objectName">The object name of the service.</param>
            <returns>An object that implements the specified interface that forwards all calls to the specified service.</returns>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcHelper.TryRemotingCall(System.Action,System.Int32,System.Int32)">
            <summary>
            Tries to execute a remoting calls, and retries it if a network failure occurs.
            </summary>
            <param name="remotingAction">The <see cref="T:System.Action"/> that performs the remoting call.</param>
            <param name="retryInterval">The amount of time to wait, in milliseconds, before retrying after a failure.</param>
            <param name="maxRetries">The maximum amount of times to retry, or -1 to retry indefinitely.</param>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcHelper.AbortRetries">
            <summary>
            Aborts any retry attempts done by <see cref="M:Ookii.Jumbo.Rpc.RpcHelper.TryRemotingCall(System.Action,System.Int32,System.Int32)"/>.
            </summary>
            <remarks>
            All future calls to <see cref="M:Ookii.Jumbo.Rpc.RpcHelper.TryRemotingCall(System.Action,System.Int32,System.Int32)"/> will not do any more retries, so only use this
            function when you are shutting down.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcHelper.CloseConnections">
            <summary>
            Closes all RPC client connections that are not currently being used.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.Rpc.RpcProxyBase">
            <summary>
            Abstract base class for RPC proxy classes. This class is for internal Jumbo use only and should not be used from your code.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcProxyBase.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Rpc.RpcProxyBase"/> class. This class is for internal Jumbo use only and should not be used from your code.
            </summary>
            <param name="hostName"></param>
            <param name="port"></param>
            <param name="objectName"></param>
            <param name="interfaceName"></param>
        </member>
        <member name="M:Ookii.Jumbo.Rpc.RpcProxyBase.SendRequest(System.String,System.Object[])">
            <summary>
            Sends an RPC request. This class is for internal Jumbo use only and should not be used from your code.
            </summary>
            <param name="operationName">The name of the operation to invoke.</param>
            <param name="parameters">The parameters of the operation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Ookii.Jumbo.Rpc.ServerContext">
            <summary>
            Provides context for a server RPC call.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Rpc.ServerContext.Current">
            <summary>
            Gets the currently active server context for this thread.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Rpc.ServerContext.ClientHostName">
            <summary>
            Gets the host name of the client that called the server.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Rpc.ServerContext.ClientHostAddress">
            <summary>
            Gets the IP address of the client that called the server.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Rpc.ServerContext.LocalHostName">
            <summary>
            Gets the name of the local host.
            </summary>
            <value>The name of the local host.</value>
        </member>
        <member name="T:Ookii.Jumbo.RuntimeEnvironment">
            <summary>
            Provides information about the runtime environment of the application.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.RuntimeEnvironment.Description">
            <summary>
            Gets a description of the runtime environment, including the version number.
            </summary>
            <value>
            A string value that describes the runtime environment, including the version number.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.RuntimeEnvironment.OperatingSystemDescription">
            <summary>
            Gets a description of the operating system, including the version number.
            </summary>
            <value>
            A string value that describes the operating system, including the version number.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.RuntimeEnvironment.ProcessorName">
            <summary>
            Gets the name of the system's processor.
            </summary>
            <value>
            A string value containing the name of the system's processor.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.RuntimeEnvironment.JumboVersion">
            <summary>
            Gets the version of Jumbo as a string.
            </summary>
            <value>
            A string value for the Jumbo version.
            </value>
            <remarks>
            The value returned is actually the informational version of the Ookii.Jumbo assembly.
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.RuntimeEnvironment.JumboAssemblyVersion">
            <summary>
            Gets the version of Jumbo.
            </summary>
            <value>
            A <see cref="T:System.Version"/> value for the Jumbo version.
            </value>
            <remarks>
            The value returned is actually the version of the Ookii.Jumbo assembly.
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.RuntimeEnvironment.JumboConfiguration">
            <summary>
            Gets the Jumbo build configuration, typically the branch name.
            </summary>
            <value>
            A string describing the build configuration.
            </value>
            <remarks>
            This is typically the subversion branch from which Jumbo was built.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.RuntimeEnvironment.LogEnvironmentInformation(log4net.ILog)">
            <summary>
            Writes environment information to the specified log.
            </summary>
            <param name="log">The log to write the information to.</param>
        </member>
        <member name="T:Ookii.Jumbo.ServerAddress">
            <summary>
            Represents the host name and port number of a data server or task server.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.ServerAddress"/> class.
            </summary>
            <remarks>
            This constructor is used for deserialization purposes only.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.ServerAddress"/> class with the specified host name and port number.
            </summary>
            <param name="hostName">The host name of the server.</param>
            <param name="port">The port number of the server.</param>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.ServerAddress"/> class with the specified address.
            </summary>
            <param name="address">A string representation of the server address, in the form hostname:port, e.g. "my_server:9000".</param>
        </member>
        <member name="P:Ookii.Jumbo.ServerAddress.HostName">
            <summary>
            Gets the host name of the server.
            </summary>
            <value>
            The host name of the server.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.ServerAddress.Port">
            <summary>
            Gets the port number of the server.
            </summary>
            <value>
            The port number of the server.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:Ookii.Jumbo.ServerAddress"/>.
            </summary>
            <returns>A string representation of the current <see cref="T:Ookii.Jumbo.ServerAddress"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.Equals(System.Object)">
            <summary>
            Compares this <see cref="T:Ookii.Jumbo.ServerAddress"/> to another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns><see langword="true"/> if this <see cref="T:Ookii.Jumbo.ServerAddress"/> is equal to the specified object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.GetHashCode">
            <summary>
            Gets a hash code that identifies this object.
            </summary>
            <returns>A hash code that identifies this object.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.op_Equality(Ookii.Jumbo.ServerAddress,Ookii.Jumbo.ServerAddress)">
            <summary>
            Determines whether two specified <see cref="T:Ookii.Jumbo.ServerAddress"/> objects have the same value.
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="left"/> is equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.op_Inequality(Ookii.Jumbo.ServerAddress,Ookii.Jumbo.ServerAddress)">
            <summary>
            Determines whether two specified <see cref="T:Ookii.Jumbo.ServerAddress"/> objects have different values.
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="left"/> is different from <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.op_LessThan(Ookii.Jumbo.ServerAddress,Ookii.Jumbo.ServerAddress)">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.ServerAddress"/> is less than another specified <see cref="T:Ookii.Jumbo.ServerAddress"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.op_LessThanOrEqual(Ookii.Jumbo.ServerAddress,Ookii.Jumbo.ServerAddress)">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.ServerAddress"/> is less than or equal to another specified <see cref="T:Ookii.Jumbo.ServerAddress"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.op_GreaterThan(Ookii.Jumbo.ServerAddress,Ookii.Jumbo.ServerAddress)">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.ServerAddress"/> is greater than another specified <see cref="T:Ookii.Jumbo.ServerAddress"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.op_GreaterThanOrEqual(Ookii.Jumbo.ServerAddress,Ookii.Jumbo.ServerAddress)">
            <summary>
            Determines whether one specified <see cref="T:Ookii.Jumbo.ServerAddress"/> is greater than or equal to another specified <see cref="T:Ookii.Jumbo.ServerAddress"/>
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.ServerAddress"/> or <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.ServerAddress.CompareTo(Ookii.Jumbo.ServerAddress)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that 
            indicates whether the current instance precedes, follows, or occurs in the same position in the 
            sort order as the other object. 
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="T:Ookii.Jumbo.ServerMetrics">
            <summary>
            Provides metrics about a data or task server.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.ServerMetrics.Address">
            <summary>
            Gets or sets the address of the server.
            </summary>
            <value>
            The address of the server.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.ServerMetrics.RackId">
            <summary>
            Gets or sets the ID of the rack of the server.
            </summary>
            <value>
            The rack ID of the server, or <see langword="null"/> if rack-awareness isn't used or this server is in the default rack.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.ServerMetrics.LastContactUtc">
            <summary>
            Gets or sets the time of the last heartbeat sent to the name server (for data servers) or job server (for task servers).
            </summary>
            <value>
            The UTC date and time of the last heartbeat sent.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.ServerMetrics.ToString">
            <summary>
            Gets a string representation of the current <see cref="T:Ookii.Jumbo.ServerMetrics"/>.
            </summary>
            <returns>A string representation of the current <see cref="T:Ookii.Jumbo.ServerMetrics"/>.</returns>
        </member>
        <member name="T:Ookii.Jumbo.StreamExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies one stream to another.
            </summary>
            <param name="source">The stream to copy from.</param>
            <param name="destination">The stream to copy to.</param>
        </member>
        <member name="M:Ookii.Jumbo.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies one stream to another using the specified buffer size.
            </summary>
            <param name="source">The stream to copy from.</param>
            <param name="destination">The stream to copy to.</param>
            <param name="bufferSize">The size of the buffer to use while copying.</param>
        </member>
        <member name="M:Ookii.Jumbo.StreamExtensions.CopySize(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            Copies the specified number of bytes from one stream to another using the default buffer size.
            </summary>
            <param name="source">The stream to copy from.</param>
            <param name="destination">The stream to copy to.</param>
            <param name="size">The total number of bytes to copy.</param>
        </member>
        <member name="M:Ookii.Jumbo.StreamExtensions.CopySize(System.IO.Stream,System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Copies the specified number of bytes from one stream to another using the specified buffer size.
            </summary>
            <param name="source">The stream to copy from.</param>
            <param name="destination">The stream to copy to.</param>
            <param name="size">The total number of bytes to copy.</param>
            <param name="bufferSize">The size of the buffer to use while copying.</param>
        </member>
        <member name="T:Ookii.Jumbo.TcpServer">
            <summary>
            Abstract base class for a server that accepts incoming TCP connections.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.TcpServer.#ctor(System.Net.IPAddress[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.TcpServer"/> class with the specified local address, port, and maximum number of connections.
            </summary>
            <param name="localAddresses">The local IP address that the server should bind to.</param>
            <param name="port">The port to listen on.</param>
            <param name="maxConnections">The maximum number of simultaneous connections that the server will allow, or zero to have no maximum.</param>
            <remarks>
            <para>
              If <paramref name="maxConnections"/> is larger than zero, the <see cref="T:Ookii.Jumbo.TcpServer"/> class will maintain a count of
              connected clients on all specified end points. If a client tries to connect when the count is equal to <paramref name="maxConnections"/>,
              the connection will be refused.
            </para>
            <para>
              If <paramref name="maxConnections"/> is larger than zero, the <see cref="T:Ookii.Jumbo.TcpServer"/> will send a 4-byte value (to keep the remaining data
              word-aligned) that is zero to indicate the connection was rejected, or non-zero to indicate it was accepted. When <paramref name="maxConnections"/>
              is zero, this value is not sent.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.TcpServer.#ctor(System.Net.IPAddress[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.TcpServer"/> class with the specified local address and port.
            </summary>
            <param name="localAddresses">The local IP address that the server should bind to.</param>
            <param name="port">The port to listen on.</param>
        </member>
        <member name="M:Ookii.Jumbo.TcpServer.GetDefaultListenerAddresses(System.Boolean)">
            <summary>
            Gets the default addresses to listen on.
            </summary>
            <param name="listen4And6">If <see langword="true" />, return both IPv6 and IPv4 "Any" addresses; if <see langword="false" />,
            use only IPv6 if the OS supports it or only IPv4 if not.</param>
            <returns>The IPv6 and/or IPv4 "any" addresses to listen on.</returns>
        </member>
        <member name="M:Ookii.Jumbo.TcpServer.Start">
            <summary>
            Starts listening for incoming connections.
            </summary>
            <remarks>
            Listening is done on a separate thread; this function returns immediately.
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.TcpServer.Stop">
            <summary>
            Stops listening for incoming connections.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.TcpServer.HandleConnection(System.Net.Sockets.TcpClient)">
            <summary>
            When overridden in a derived class, handles a server connection.
            </summary>
            <param name="client">A <see cref="T:System.Net.Sockets.TcpClient"/> class used to send and receive data to the client that
            connected to the server.</param>
        </member>
        <member name="T:Ookii.Jumbo.Topology.ITopologyResolver">
            <summary>
            Interface for network topology resolvers.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Topology.ITopologyResolver.ResolveNode(System.String)">
            <summary>
            Determines which rack a node belongs to.
            </summary>
            <param name="hostName">The host name of the node.</param>
            <returns>The rack ID of the rack that the server belongs to.</returns>
        </member>
        <member name="T:Ookii.Jumbo.Topology.NetworkTopology">
            <summary>
            Represents a network topology, grouping nodes into racks.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Topology.NetworkTopology.#ctor(Ookii.Jumbo.JumboConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Topology.NetworkTopology"/> class.
            </summary>
            <param name="configuration">The jumbo configuration to use, or <see langword="null"/> to use the application configuration.</param>
        </member>
        <member name="P:Ookii.Jumbo.Topology.NetworkTopology.Racks">
            <summary>
            Gets the racks in the topology.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Topology.NetworkTopology.AddNode(Ookii.Jumbo.Topology.TopologyNode)">
            <summary>
            Adds a node to the topology.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Ookii.Jumbo.Topology.NetworkTopology.RemoveNode(Ookii.Jumbo.Topology.TopologyNode)">
            <summary>
            Removes a node from the topology that it's part of.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:Ookii.Jumbo.Topology.NetworkTopology.ResolveNode(System.String)">
            <summary>
            Determines which rack a node belongs to.
            </summary>
            <param name="hostName">The host name of the node.</param>
            <returns>The rack ID of the rack that the server belongs to.</returns>
        </member>
        <member name="T:Ookii.Jumbo.Topology.NetworkTopologyConfigurationElement">
            <summary>
            Provides configuration for the network topology support.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Topology.NetworkTopologyConfigurationElement.Resolver">
            <summary>
            Gets or sets the type name of the resolver to use.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.Topology.PatternTopologyResolver">
            <summary>
            Provides a simple topology resolver that uses regular expressions or range expressions to determine which rack each node belongs to.
            </summary>
            <remarks>
            <para>
              All pattern comparisons are case-insensitive.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.Topology.PatternTopologyResolver.#ctor(Ookii.Jumbo.JumboConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Topology.PatternTopologyResolver"/> class.
            </summary>
            <param name="configuration">The jumbo configuration to use. May be <see langword="null"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.Topology.PatternTopologyResolver.ResolveNode(System.String)">
            <summary>
            Determines which rack a node belongs to.
            </summary>
            <param name="hostName">The host name of the node.</param>
            <returns>The rack ID of the rack that the server belongs to.</returns>
        </member>
        <member name="T:Ookii.Jumbo.Topology.PatternTopologyResolverConfigurationElement">
            <summary>
            Provides configuration for the <see cref="T:Ookii.Jumbo.Topology.PatternTopologyResolver"/>.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Topology.PatternTopologyResolverConfigurationElement.PatternType">
            <summary>
            Gets or sets the type of the patterns used to assign nodes to racks.
            </summary>
            <value>One of the values of the <see cref="P:Ookii.Jumbo.Topology.PatternTopologyResolverConfigurationElement.PatternType"/> enumeration.</value>
        </member>
        <member name="P:Ookii.Jumbo.Topology.PatternTopologyResolverConfigurationElement.Racks">
            <summary>
            Gets the racks of this configuration element.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.Topology.PatternType">
            <summary>
            The type of patterns used by a <see cref="T:Ookii.Jumbo.Topology.PatternTopologyResolver"/>.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.Topology.PatternType.RegularExpression">
            <summary>
            The patterns are regular expressions.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.Topology.PatternType.RangeExpression">
            <summary>
            The pattersn are range expressions (see <see cref="F:Ookii.Jumbo.Topology.PatternType.RangeExpression"/>).
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.Topology.Rack">
            <summary>
            Represents a rack that groups together nodes in the network topology.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Topology.Rack.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Topology.Rack"/> class.
            </summary>
            <param name="rackId">The unique identifier for the rack.</param>
        </member>
        <member name="P:Ookii.Jumbo.Topology.Rack.RackId">
            <summary>
            Gets the unique identifier for the rack.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Topology.Rack.Nodes">
            <summary>
            Gets the nodes that are part of this rack.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.Topology.RackConfigurationElement">
            <summary>
            Provides configuration for a rack for the <see cref="T:Ookii.Jumbo.Topology.PatternTopologyResolver"/>.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Topology.RackConfigurationElement.RackId">
            <summary>
            Gets or sets the ID of the rack.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Topology.RackConfigurationElement.Pattern">
            <summary>
            Gets or sets the pattern used to identify nodes of this rack.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.Topology.RackConfigurationElementCollection">
            <summary>
            Represents a collection of <see cref="T:Ookii.Jumbo.Topology.RackConfigurationElement"/> objects in a configuration file.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RackConfigurationElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Topology.RackConfigurationElementCollection"/> class.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Topology.RackConfigurationElementCollection.Item(System.Int32)">
            <summary>
            Gets the element in the collection at the specified index.
            </summary>
            <param name="index">The index of the item to return.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RackConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new element.
            </summary>
            <returns>A new <see cref="T:Ookii.Jumbo.Topology.RackConfigurationElement"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RackConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key.
            </summary>
            <param name="element">The element whose key to get.</param>
            <returns>The <see cref="P:Ookii.Jumbo.Topology.RackConfigurationElement.RackId"/> property value.</returns>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RackConfigurationElementCollection.Add(Ookii.Jumbo.Topology.RackConfigurationElement)">
            <summary>
            Adds an element to the collection.
            </summary>
            <param name="element">The element to add to the collection.</param>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RackConfigurationElementCollection.Remove(Ookii.Jumbo.Topology.RackConfigurationElement)">
            <summary>
            Removes an element from the collection.
            </summary>
            <param name="element">The element to remove from the collection.</param>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RackConfigurationElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the collection.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="T:Ookii.Jumbo.Topology.RangeExpression">
            <summary>
            Provides simple numeric range-based string matching.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Ookii.Jumbo.Topology.RangeExpression"/> class allows you to match strings containing ranges of numbers.
            </para>
            <para>
              String matching is done using a pattern. This pattern, in addition to regular text, can contain
              numeric ranges of the form "[n-m]" where n and m are both numbers, e.g. "[001-299]". The ranges
              are inclusive.
            </para>
            <para>
              The number of characters in the lower bound of the range determines the minimum number of characters;
              e.g. the expression "foo[001-299]" will match "foo001" but not "foo1", whereas the expression "foo[1-299]"
              would match either.
            </para>
            <para>
              The number of characters in the upper bound determines the maximum number of characters; e.g.
              the expression "foo[1-099] matches "foo050" and "foo50" but not "foo0050".
            </para>
            <para>
              In addition to ranges, you can also use alternation with the | character. For example, "foo[00-50]|bar[51-99]"
              will match both e.g. "foo25" and "bar75".
            </para>
            <para>
              You can also group subexpressions in parentheses for use with alternation. For example "(foo|bar)[00-50]" will
              match both e.g. "foo25" and "bar25".
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RangeExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Topology.RangeExpression"/> class.
            </summary>
            <param name="pattern">The pattern to match against..</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="pattern"/> is not a valid range expression.</exception>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RangeExpression.Match(System.String)">
            <summary>
            Matches the specified string against the pattern.
            </summary>
            <param name="value">The string to match.</param>
            <returns><see langword="true"/> if <paramref name="value"/> matches the pattern; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RangeExpression.Match(System.String,System.Boolean)">
            <summary>
            Matches the specified string against the pattern.
            </summary>
            <param name="value">The string to match.</param>
            <param name="matchCase"><see langword="true"/> to perform a case-sensitive comparison; <see langword="false"/> to perform a case-insensitive comparison.</param>
            <returns><see langword="true"/> if <paramref name="value"/> matches the pattern; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.Topology.RangeExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Ookii.Jumbo.Topology.TopologyNode">
            <summary>
            Base class for cluster nodes that are part of a network topology.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Topology.TopologyNode.#ctor(Ookii.Jumbo.ServerAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.Topology.TopologyNode"/> class.
            </summary>
            <param name="address">The address of the node.</param>
        </member>
        <member name="P:Ookii.Jumbo.Topology.TopologyNode.Address">
            <summary>
            Gets the address of the node.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.Topology.TopologyNode.Rack">
            <summary>
            Gets the rack this node belongs to.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.Topology.TopologyNode.DistanceFrom(System.String,System.String)">
            <summary>
            Gets the distance between a node in the topology and another node (which may or may not be in the topology).
            </summary>
            <param name="hostName">The host name of the other node. May be <see langword="null"/>.</param>
            <param name="rackId">The rack ID of the other node. May be <see langword="null"/>.</param>
            <returns>0 if the two nodes are identical, 1 if they are in the same rack, or 2 if they are in different racks.</returns>
        </member>
        <member name="M:Ookii.Jumbo.Topology.TopologyNode.DistanceFrom(Ookii.Jumbo.Topology.TopologyNode)">
            <summary>
            Gets the distance between a node in the topology and another node.
            </summary>
            <param name="node">The other node.</param>
            <returns>0 if the two nodes are identical, 1 if they are in the same rack, or 2 if they are in different racks.</returns>
        </member>
        <member name="T:Ookii.Jumbo.TypeExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.TypeExtensions.FindGenericInterfaceType(System.Type,System.Type)">
            <summary>
            Finds a specific generic interface implemented by a type based on the generic type definition of the interface.
            </summary>
            <param name="type">The type whose interfaces to check.</param>
            <param name="interfaceType">The generic type definition of the interface.</param>
            <returns>The instantiated generic interface type.</returns>
        </member>
        <member name="M:Ookii.Jumbo.TypeExtensions.FindGenericInterfaceType(System.Type,System.Type,System.Boolean)">
            <summary>
            Finds a specific generic interface implemented by a type based on the generic type definition of the interface.
            </summary>
            <param name="type">The type whose interfaces to check.</param>
            <param name="interfaceType">The generic type definition of the interface.</param>
            <param name="throwOnNotFound"><see langword="true"/> to throw an exception if the specified type doesn't implement the interface;
            <see langword="false"/> to return <see langword="null"/> in that case.</param>
            <returns>The instantiated generic interface type.</returns>
        </member>
        <member name="M:Ookii.Jumbo.TypeExtensions.FindGenericBaseType(System.Type,System.Type,System.Boolean)">
            <summary>
            Finds a specific generic base type, based on the generic type definition of the base type.
            </summary>
            <param name="type">The type whose base types to check.</param>
            <param name="baseType">The generic type definition of the base type.</param>
            <param name="throwOnNotFound"><see langword="true"/> to throw an exception if the specified type doesn't inherit from the type;
            <see langword="false"/> to return <see langword="null"/> in that case.</param>
            <returns>The instantiated generic base type.</returns>
        </member>
        <member name="T:Ookii.Jumbo.TypeReference">
            <summary>
            Represents a reference to a <see cref="T:System.Type"/> that will be serialized to XML using the type name.
            </summary>
        </member>
        <member name="F:Ookii.Jumbo.TypeReference.Empty">
            <summary>
            A <see cref="T:Ookii.Jumbo.TypeReference" /> instance that doesn't reference any type.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.TypeReference.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.TypeReference"/> structure using the specified type.
            </summary>
            <param name="type">The type this instance should reference. May be <see langword="null"/>.</param>
        </member>
        <member name="M:Ookii.Jumbo.TypeReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.TypeReference"/> structure using the specified type name.
            </summary>
            <param name="typeName">Name of the type. May be <see langword="null"/>.</param>
        </member>
        <member name="P:Ookii.Jumbo.TypeReference.ResolveTypes">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Ookii.Jumbo.TypeReference"/> instances should resolve the type specified by <see cref="P:Ookii.Jumbo.TypeReference.TypeName"/>
            if <see cref="P:Ookii.Jumbo.TypeReference.ReferencedType"/> wasn't explicitly set.
            </summary>
            <value>
            	<see langword="true"/> if types should be resolved; otherwise, <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            <para>
              The <see cref="T:Ookii.Jumbo.TypeReference"/> class is used as part of the configuration for Jumbo Jet jobs. The job server will load the
              configuration, but loading referenced assemblies into the job server should be avoided. This property allows you to ensure
              that even if e.g. a debugger accesses the <see cref="P:Ookii.Jumbo.TypeReference.ReferencedType"/> property the type will not be loaded.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.Jumbo.TypeReference.ReferencedType">
            <summary>
            Gets or sets the type that this <see cref="T:Ookii.Jumbo.TypeReference" /> references.
            </summary>
            <value>
            The <see cref="T:System.Type"/> that this <see cref="T:Ookii.Jumbo.TypeReference"/> references.
            </value>
            <exception cref="T:System.InvalidOperationException">Resolving type references is disabled.</exception>
        </member>
        <member name="P:Ookii.Jumbo.TypeReference.TypeName">
            <summary>
            Gets or sets the name of the type that this <see cref="T:Ookii.Jumbo.TypeReference" /> references.
            </summary>
            <value>
            The assembly qualified name of the referenced type.
            </value>
        </member>
        <member name="M:Ookii.Jumbo.TypeReference.ToString">
            <summary>
            Converts this instance to a string representation.
            </summary>
            <returns>The name of the type that this <see cref="T:Ookii.Jumbo.TypeReference"/> references, or an empty string if <see cref="P:Ookii.Jumbo.TypeReference.TypeName"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.TypeReference.op_Implicit(System.Type)~Ookii.Jumbo.TypeReference">
            <summary>
            Implicitly converts a <see cref="T:System.Type"/> to a <see cref="T:Ookii.Jumbo.TypeReference"/>.
            </summary>
            <param name="type">The type to reference.</param>
            <returns>An instance of <see cref="T:Ookii.Jumbo.TypeReference"/> that references <paramref name="type"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.TypeReference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Ookii.Jumbo.TypeReference"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare to the current <see cref="T:Ookii.Jumbo.TypeReference"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Ookii.Jumbo.TypeReference"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.TypeReference.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.TypeReference.op_Equality(Ookii.Jumbo.TypeReference,Ookii.Jumbo.TypeReference)">
            <summary>
            Determines whether two specified <see cref="T:Ookii.Jumbo.TypeReference"/> object have the same value.
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.TypeReference"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.TypeReference"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.TypeReference.op_Inequality(Ookii.Jumbo.TypeReference,Ookii.Jumbo.TypeReference)">
            <summary>
            Determines whether two specified <see cref="T:Ookii.Jumbo.TypeReference"/> object have different values.
            </summary>
            <param name="left">A <see cref="T:Ookii.Jumbo.TypeReference"/>.</param>
            <param name="right">A <see cref="T:Ookii.Jumbo.TypeReference"/>.</param>
            <returns><see langword="true"/> if the value of <paramref name="left"/> is different from the value of <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ookii.Jumbo.TypeReference.Equals(Ookii.Jumbo.TypeReference)">
            <summary>
            Returns a value indicating whether the this instance is equal to the specified instance.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns><see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Ookii.Jumbo.UdpServer">
            <summary>
            Abstract base class for a server that handles incoming UDP messages.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.UdpServer.#ctor(System.Net.IPAddress[],System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.UdpServer"/> class.
            </summary>
            <param name="localAddresses">The local addresses to bind to.</param>
            <param name="port">The port to bind to.</param>
            <param name="allowAddressReuse">If set to <see langword="true"/>, allows the sockets to be bound to an address that is already in use.</param>
        </member>
        <member name="M:Ookii.Jumbo.UdpServer.Start">
            <summary>
            Starts listening for UDP datagrams.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.UdpServer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.UdpServer.HandleMessage(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            When implemented in a derived class, handles processing of a UDP message.
            </summary>
            <param name="message">The message data.</param>
            <param name="remoteEndPoint">The remote end point from where the message was received.</param>
        </member>
        <member name="M:Ookii.Jumbo.UdpServer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="T:Ookii.Jumbo.UnmanagedBuffer">
            <summary>
            Represents a buffer of memory stored on the unmanaged (native) heap.
            </summary>
            <remarks>
            <para>
              This class is used as an alternative for byte[]. The main differences are that the memory is returned
              to the OS when the class is disposed/finalized, and the buffer is not zero-initialized.
            </para>
            <para>
              The main reason for the existence of this class is Mono's reluctance to release memory from the managed heap
              back to the OS which can lead to pagefile thrashing if you're dealing with many large buffers. This problem
              may not apply to the sgen garbage collector, but this has not been tested.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.UnmanagedBuffer"/> class.
            </summary>
            <param name="size">The size, in bytes, of the buffer.</param>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBuffer.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.UnmanagedBuffer"/> class.
            </summary>
            <param name="size">The size, in bytes, of the buffer.</param>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBuffer.Finalize">
            <summary>
            Releases all resources used by this class.
            </summary>
        </member>
        <member name="P:Ookii.Jumbo.UnmanagedBuffer.Size">
            <summary>
            Gets the size of the buffer.
            </summary>
            <value>
            The size of the buffer, in bytes.
            </value>
        </member>
        <member name="P:Ookii.Jumbo.UnmanagedBuffer.Buffer">
            <summary>
            Gets a pointer to the first byte of the buffer.
            </summary>
            <value>
            An unsafe pointer to the first byte of the buffer
            </value>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBuffer.Copy(System.Byte[],System.Int32,Ookii.Jumbo.UnmanagedBuffer,System.Int32,System.Int32)">
            <summary>
            Copies data from a managed array to the buffer.
            </summary>
            <param name="source">The managed byte array containing the data to copy.</param>
            <param name="sourceIndex">The index in <paramref name="source"/> to start copying at.</param>
            <param name="destination">The <see cref="T:Ookii.Jumbo.UnmanagedBuffer"/> to copy the data to.</param>
            <param name="destinationIndex">The index in <paramref name="destination"/> to start copying at.</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBuffer.CopyCircular(System.Byte[],System.Int32,Ookii.Jumbo.UnmanagedBuffer,System.Int64,System.Int32)">
            <summary>
            Copies data from a managed array to the buffer, wrapping around if necessary.
            </summary>
            <param name="source">The managed byte array containing the data to copy.</param>
            <param name="sourceIndex">The index in <paramref name="source"/> to start copying at.</param>
            <param name="destination">The <see cref="T:Ookii.Jumbo.UnmanagedBuffer"/> to copy the data to.</param>
            <param name="destinationIndex">The index in <paramref name="destination"/> to start copying at.</param>
            <param name="count">The number of bytes to copy.</param>
            <returns>The next index position after writing the data.</returns>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBuffer.Copy(Ookii.Jumbo.UnmanagedBuffer,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data from a buffer to a managed array.
            </summary>
            <param name="source">The <see cref="T:Ookii.Jumbo.UnmanagedBuffer"/> containing the data to copy.</param>
            <param name="sourceIndex">The index in <paramref name="source"/> to start copying at.</param>
            <param name="destination">The managed byte array to copy the data to.</param>
            <param name="destinationIndex">The index in <paramref name="destination"/> to start copying at.</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBuffer.CopyCircular(Ookii.Jumbo.UnmanagedBuffer,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data from a circular buffer to a managed array.
            </summary>
            <param name="source">The <see cref="T:Ookii.Jumbo.UnmanagedBuffer"/> containing the data to copy.</param>
            <param name="sourceIndex">The index in <paramref name="source"/> to start copying at.</param>
            <param name="destination">The managed byte array to copy the data to.</param>
            <param name="destinationIndex">The index in <paramref name="destination"/> to start copying at.</param>
            <param name="count">The number of bytes to copy.</param>
            <returns>The next index position after writing the data.</returns>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBuffer.Resize(System.Int32)">
            <summary>
            Resizes the buffer.
            </summary>
            <param name="size">The new size of the buffer.</param>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBuffer.Dispose">
            <summary>
            Releases all resources used by this class.
            </summary>
        </member>
        <member name="T:Ookii.Jumbo.UnmanagedBufferMemoryStream">
            <summary>
            Memory stream that uses an <see cref="T:Ookii.Jumbo.UnmanagedBuffer"/> for the underlying storage.
            </summary>
        </member>
        <member name="E:Ookii.Jumbo.UnmanagedBufferMemoryStream.Disposed">
            <summary>
            Event raised when the stream is disposed
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBufferMemoryStream.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.Jumbo.UnmanagedBufferMemoryStream"/>.
            </summary>
            <param name="capacity">The capacity of the memory stream.</param>
        </member>
        <member name="P:Ookii.Jumbo.UnmanagedBufferMemoryStream.InitialCapacity">
            <summary>
            Gets the capacity the stream had when it was created.
            </summary>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBufferMemoryStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Ookii.Jumbo.UnmanagedBufferMemoryStream"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to release unmanaged and managed resources; <see langword="false"/> to release unmanaged resources only.</param>
        </member>
        <member name="M:Ookii.Jumbo.UnmanagedBufferMemoryStream.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Ookii.Jumbo.UnmanagedBufferMemoryStream.Disposed"/> event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
    </members>
</doc>
